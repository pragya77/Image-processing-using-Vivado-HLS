// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel,hls_ip_2016_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.107500,HLS_SYN_LAT=2845336,HLS_SYN_TPT=none,HLS_SYN_MEM=128,HLS_SYN_DSP=0,HLS_SYN_FF=960,HLS_SYN_LUT=1514}" *)

module sobel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_image_address0,
        input_image_ce0,
        input_image_q0,
        input_image_address1,
        input_image_ce1,
        input_image_q1,
        output_image_address0,
        output_image_ce0,
        output_image_we0,
        output_image_d0,
        output_image_address1,
        output_image_ce1,
        output_image_we1,
        output_image_d1
);

parameter    ap_ST_fsm_state1 = 51'b1;
parameter    ap_ST_fsm_state2 = 51'b10;
parameter    ap_ST_fsm_state3 = 51'b100;
parameter    ap_ST_fsm_state4 = 51'b1000;
parameter    ap_ST_fsm_state5 = 51'b10000;
parameter    ap_ST_fsm_state6 = 51'b100000;
parameter    ap_ST_fsm_state7 = 51'b1000000;
parameter    ap_ST_fsm_state8 = 51'b10000000;
parameter    ap_ST_fsm_state9 = 51'b100000000;
parameter    ap_ST_fsm_state10 = 51'b1000000000;
parameter    ap_ST_fsm_state11 = 51'b10000000000;
parameter    ap_ST_fsm_state12 = 51'b100000000000;
parameter    ap_ST_fsm_state13 = 51'b1000000000000;
parameter    ap_ST_fsm_state14 = 51'b10000000000000;
parameter    ap_ST_fsm_state15 = 51'b100000000000000;
parameter    ap_ST_fsm_state16 = 51'b1000000000000000;
parameter    ap_ST_fsm_state17 = 51'b10000000000000000;
parameter    ap_ST_fsm_state18 = 51'b100000000000000000;
parameter    ap_ST_fsm_state19 = 51'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 51'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 51'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 51'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 51'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 51'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 51'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 51'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 51'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 51'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 51'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 51'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 51'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 51'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 51'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 51'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 51'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 51'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 51'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 51'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 51'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 51'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 51'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 51'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 51'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 51'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 51'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state46 = 51'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state47 = 51'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 51'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 51'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state50 = 51'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state51 = 51'b100000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_32 = 32'b110010;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_101 = 32'b100000001;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv17_FF = 17'b11111111;
parameter    ap_const_lv15_0 = 15'b000000000000000;
parameter    ap_const_lv9_100 = 9'b100000000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv9_FF = 9'b11111111;
parameter    ap_const_lv9_1FF = 9'b111111111;
parameter    ap_const_lv17_FF00 = 17'b1111111100000000;
parameter    ap_const_lv8_FF = 8'b11111111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] input_image_address0;
output   input_image_ce0;
input  [31:0] input_image_q0;
output  [15:0] input_image_address1;
output   input_image_ce1;
input  [31:0] input_image_q1;
output  [15:0] output_image_address0;
output   output_image_ce0;
output   output_image_we0;
output  [31:0] output_image_d0;
output  [15:0] output_image_address1;
output   output_image_ce1;
output   output_image_we1;
output  [31:0] output_image_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] input_image_address0;
reg input_image_ce0;
reg[15:0] input_image_address1;
reg input_image_ce1;
reg[15:0] output_image_address0;
reg output_image_ce0;
reg output_image_we0;
reg[31:0] output_image_d0;
reg[15:0] output_image_address1;
reg output_image_ce1;
reg output_image_we1;

(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [31:0] reg_285;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state6;
wire   [17:0] tmp_26_cast_fu_303_p1;
reg   [17:0] tmp_26_cast_reg_834;
wire   [0:0] ap_CS_fsm_state2;
reg   [15:0] output_image_addr_3_reg_841;
reg   [15:0] output_image_addr_4_reg_846;
wire   [8:0] i_1_fu_328_p2;
reg   [8:0] i_1_reg_854;
wire   [17:0] tmp_30_cast_fu_354_p1;
reg   [17:0] tmp_30_cast_reg_859;
wire   [0:0] exitcond5_fu_322_p2;
wire   [0:0] tmp_4_fu_358_p2;
reg   [0:0] tmp_4_reg_866;
wire   [0:0] tmp_5_fu_364_p2;
reg   [0:0] tmp_5_reg_870;
wire  signed [17:0] tmp_32_cast_fu_384_p1;
reg  signed [17:0] tmp_32_cast_reg_874;
wire   [0:0] tmp1_fu_388_p2;
reg   [0:0] tmp1_reg_881;
wire   [0:0] ap_CS_fsm_state3;
reg   [15:0] input_image_addr_6_reg_905;
reg   [15:0] output_image_addr_reg_910;
reg   [15:0] output_image_addr_2_reg_915;
reg   [15:0] image_addr_1_reg_920;
wire   [8:0] j_1_fu_454_p2;
reg   [8:0] j_1_reg_928;
wire   [0:0] or_cond7_fu_478_p2;
reg   [0:0] or_cond7_reg_934;
wire   [0:0] exitcond4_fu_448_p2;
wire   [17:0] tmp_9_cast_cast_fu_489_p1;
reg   [17:0] tmp_9_cast_cast_reg_938;
wire   [17:0] tmp_34_fu_512_p2;
reg   [17:0] tmp_34_reg_954;
reg   [31:0] input_image_load_1_reg_959;
wire   [17:0] tmp_36_fu_529_p2;
reg   [17:0] tmp_36_reg_969;
wire   [17:0] tmp_37_fu_534_p2;
reg   [17:0] tmp_37_reg_974;
wire   [0:0] ap_CS_fsm_state5;
reg   [31:0] input_image_load_2_reg_989;
reg   [31:0] input_image_load_3_reg_995;
wire   [31:0] tmp_13_fu_573_p2;
reg   [31:0] tmp_13_reg_1005;
wire   [31:0] tmp_18_fu_595_p2;
reg   [31:0] tmp_18_reg_1010;
wire   [31:0] x_dir_fu_606_p2;
reg   [31:0] x_dir_reg_1015;
wire   [0:0] ap_CS_fsm_state7;
wire   [31:0] y_dir_fu_623_p2;
reg   [31:0] y_dir_reg_1022;
wire   [0:0] tmp_21_fu_670_p2;
reg   [0:0] tmp_21_reg_1029;
wire   [0:0] ap_CS_fsm_state8;
wire   [31:0] tmp_6_fu_698_p2;
reg   [31:0] tmp_6_reg_1039;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] exitcond3_fu_692_p2;
wire   [0:0] ap_CS_fsm_state12;
wire   [7:0] d_1_fu_723_p2;
reg   [7:0] d_1_reg_1052;
wire   [0:0] exitcond2_fu_717_p2;
wire   [7:0] c_1_fu_729_p2;
reg   [15:0] output_image_addr_1_reg_1065;
wire   [0:0] ap_CS_fsm_state15;
wire   [7:0] l_1_fu_799_p2;
reg   [7:0] l_1_reg_1078;
wire   [0:0] exitcond_fu_793_p2;
wire   [7:0] k_1_fu_805_p2;
wire   [0:0] ap_CS_fsm_state16;
reg   [15:0] image_address0;
reg    image_ce0;
reg    image_we0;
wire   [31:0] image_d0;
wire   [31:0] image_q0;
reg   [8:0] i_reg_210;
reg   [8:0] j_reg_221;
wire   [0:0] ap_CS_fsm_state9;
reg   [7:0] c_reg_233;
wire   [0:0] ap_CS_fsm_state10;
reg   [7:0] d_reg_245;
wire   [0:0] ap_CS_fsm_state13;
reg   [7:0] k_reg_256;
reg   [7:0] l_reg_268;
wire   [0:0] ap_CS_fsm_state51;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] exitcond1_fu_773_p2;
wire   [31:0] tmp_3_fu_298_p1;
wire   [31:0] tmp_15_fu_313_p3;
wire  signed [31:0] tmp_33_cast_fu_412_p1;
wire   [31:0] tmp_34_cast_fu_422_p1;
wire   [31:0] j_cast8_fu_394_p1;
wire   [31:0] tmp_35_cast_fu_433_p1;
wire   [31:0] tmp_36_cast_fu_443_p1;
wire  signed [31:0] tmp_39_cast_fu_498_p1;
wire   [31:0] tmp_40_cast_fu_507_p1;
wire  signed [31:0] tmp_42_cast_fu_524_p1;
wire   [31:0] tmp_41_cast_fu_539_p1;
wire   [31:0] tmp_43_cast_fu_543_p1;
wire   [31:0] tmp_44_cast_fu_547_p1;
wire   [31:0] tmp_31_fu_712_p1;
wire   [31:0] tmp_43_fu_787_p1;
reg   [31:0] min_fu_56;
wire   [31:0] max_6_max_1_fu_741_p3;
reg   [31:0] min_1_fu_60;
wire   [31:0] max_fu_755_p3;
wire   [0:0] tmp_24_fu_676_p2;
wire   [31:0] grp_fu_823_p2;
wire   [16:0] tmp_s_fu_290_p3;
wire   [16:0] tmp_10_fu_307_p2;
wire   [16:0] tmp_16_fu_346_p3;
wire   [8:0] sum_fu_370_p2;
wire   [16:0] tmp_25_fu_376_p3;
wire   [0:0] tmp_fu_334_p2;
wire   [0:0] tmp_1_fu_340_p2;
wire   [17:0] j_cast8_cast_fu_403_p1;
wire   [17:0] tmp_26_fu_407_p2;
wire   [17:0] tmp_27_fu_417_p2;
wire   [16:0] j_cast8_cast1_fu_399_p1;
wire   [16:0] tmp_28_fu_427_p2;
wire   [17:0] tmp_29_fu_438_p2;
wire   [0:0] tmp_7_fu_460_p2;
wire   [0:0] tmp_8_fu_466_p2;
wire   [0:0] tmp2_fu_472_p2;
wire   [8:0] tmp_9_fu_483_p2;
wire   [17:0] tmp_32_fu_493_p2;
wire   [17:0] tmp_33_fu_503_p2;
wire   [17:0] tmp_cast_cast_fu_516_p1;
wire   [17:0] tmp_35_fu_519_p2;
wire   [31:0] tmp_11_fu_562_p2;
wire   [31:0] tmp_38_fu_551_p2;
wire   [31:0] tmp_39_fu_556_p2;
wire   [31:0] tmp_12_fu_567_p2;
wire   [31:0] tmp_40_fu_579_p2;
wire   [31:0] tmp3_fu_584_p2;
wire   [31:0] tmp_17_fu_589_p2;
wire   [31:0] tmp_14_fu_601_p2;
wire   [31:0] tmp_41_fu_612_p2;
wire   [31:0] tmp_19_fu_618_p2;
wire   [0:0] abscond_fu_634_p2;
wire   [31:0] neg_fu_629_p2;
wire   [0:0] abscond1_fu_651_p2;
wire   [31:0] neg1_fu_646_p2;
wire   [31:0] abs_fu_639_p3;
wire   [31:0] abs1_fu_656_p3;
wire   [15:0] tmp_30_fu_704_p3;
wire   [0:0] tmp_2_fu_735_p2;
wire   [0:0] tmp_20_fu_749_p2;
wire   [15:0] tmp_42_fu_779_p3;
wire   [31:0] tmp_44_fu_811_p2;
wire   [31:0] grp_fu_823_p0;
reg    grp_fu_823_ap_start;
wire    grp_fu_823_ap_done;
reg   [50:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 51'b1;
end

sobel_image #(
    .DataWidth( 32 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
image_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(image_address0),
    .ce0(image_ce0),
    .we0(image_we0),
    .d0(image_d0),
    .q0(image_q0)
);

sobel_sdiv_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sobel_sdiv_32ns_3bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_823_ap_start),
    .done(grp_fu_823_ap_done),
    .din0(grp_fu_823_p0),
    .din1(tmp_6_reg_1039),
    .ce(1'b1),
    .dout(grp_fu_823_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ~(1'b0 == exitcond2_fu_717_p2))) begin
        c_reg_233 <= c_1_fu_729_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        c_reg_233 <= ap_const_lv8_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'b0 == exitcond3_fu_692_p2))) begin
        d_reg_245 <= ap_const_lv8_1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        d_reg_245 <= d_1_reg_1052;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond4_fu_448_p2))) begin
        i_reg_210 <= i_1_reg_854;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_210 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_322_p2 == 1'b0))) begin
        j_reg_221 <= ap_const_lv9_0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_221 <= j_1_reg_928;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(1'b0 == exitcond3_fu_692_p2))) begin
        k_reg_256 <= ap_const_lv8_1;
    end else if (((1'b1 == ap_CS_fsm_state15) & ~(1'b0 == exitcond_fu_793_p2))) begin
        k_reg_256 <= k_1_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == exitcond1_fu_773_p2))) begin
        l_reg_268 <= ap_const_lv8_1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        l_reg_268 <= l_1_reg_1078;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        min_1_fu_60 <= max_fu_755_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        min_1_fu_60 <= image_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        min_fu_56 <= max_6_max_1_fu_741_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        min_fu_56 <= image_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_285 <= input_image_q1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_285 <= input_image_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == exitcond2_fu_717_p2))) begin
        d_1_reg_1052 <= d_1_fu_723_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_854 <= i_1_fu_328_p2;
        output_image_addr_3_reg_841[15 : 8] <= tmp_3_fu_298_p1[15 : 8];
        output_image_addr_4_reg_846[15 : 8] <= tmp_15_fu_313_p3[15 : 8];
        tmp_26_cast_reg_834[16 : 8] <= tmp_26_cast_fu_303_p1[16 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        image_addr_1_reg_920 <= tmp_36_cast_fu_443_p1;
        input_image_addr_6_reg_905 <= tmp_34_cast_fu_422_p1;
        j_1_reg_928 <= j_1_fu_454_p2;
        output_image_addr_2_reg_915 <= tmp_35_cast_fu_433_p1;
        output_image_addr_reg_910[8 : 0] <= j_cast8_fu_394_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_image_load_1_reg_959 <= input_image_q1;
        tmp_34_reg_954 <= tmp_34_fu_512_p2;
        tmp_36_reg_969 <= tmp_36_fu_529_p2;
        tmp_37_reg_974 <= tmp_37_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_image_load_2_reg_989 <= input_image_q0;
        input_image_load_3_reg_995 <= input_image_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == exitcond_fu_793_p2))) begin
        l_1_reg_1078 <= l_1_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond4_fu_448_p2))) begin
        or_cond7_reg_934 <= or_cond7_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_image_addr_1_reg_1065 <= tmp_43_fu_787_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_322_p2 == 1'b0))) begin
        tmp1_reg_881 <= tmp1_fu_388_p2;
        tmp_30_cast_reg_859[16 : 8] <= tmp_30_cast_fu_354_p1[16 : 8];
        tmp_32_cast_reg_874[17 : 8] <= tmp_32_cast_fu_384_p1[17 : 8];
        tmp_4_reg_866 <= tmp_4_fu_358_p2;
        tmp_5_reg_870 <= tmp_5_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_13_reg_1005 <= tmp_13_fu_573_p2;
        tmp_18_reg_1010 <= tmp_18_fu_595_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_21_reg_1029 <= tmp_21_fu_670_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(1'b0 == exitcond3_fu_692_p2))) begin
        tmp_6_reg_1039 <= tmp_6_fu_698_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond4_fu_448_p2) & ~(1'b0 == or_cond7_fu_478_p2))) begin
        tmp_9_cast_cast_reg_938[8 : 0] <= tmp_9_cast_cast_fu_489_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_dir_reg_1015 <= x_dir_fu_606_p2;
        y_dir_reg_1022 <= y_dir_fu_623_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == exitcond1_fu_773_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == exitcond1_fu_773_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_823_ap_start = 1'b1;
    end else begin
        grp_fu_823_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        image_address0 = tmp_43_fu_787_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        image_address0 = tmp_31_fu_712_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        image_address0 = image_addr_1_reg_920;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        image_address0 = ap_const_lv32_101;
    end else begin
        image_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15))) begin
        image_ce0 = 1'b1;
    end else begin
        image_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == or_cond7_reg_934))) begin
        image_we0 = 1'b1;
    end else begin
        image_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_image_address0 = input_image_addr_6_reg_905;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_image_address0 = tmp_43_cast_fu_543_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_image_address0 = tmp_42_cast_fu_524_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_image_address0 = tmp_39_cast_fu_498_p1;
    end else begin
        input_image_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_image_address1 = tmp_44_cast_fu_547_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_image_address1 = tmp_41_cast_fu_539_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_image_address1 = tmp_40_cast_fu_507_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_image_address1 = tmp_33_cast_fu_412_p1;
    end else begin
        input_image_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        input_image_ce0 = 1'b1;
    end else begin
        input_image_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        input_image_ce1 = 1'b1;
    end else begin
        input_image_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        output_image_address0 = output_image_addr_1_reg_1065;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_image_address0 = output_image_addr_3_reg_841;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_image_address0 = output_image_addr_reg_910;
    end else begin
        output_image_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_image_address1 = output_image_addr_4_reg_846;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_image_address1 = output_image_addr_2_reg_915;
    end else begin
        output_image_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state51))) begin
        output_image_ce0 = 1'b1;
    end else begin
        output_image_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        output_image_ce1 = 1'b1;
    end else begin
        output_image_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        output_image_d0 = grp_fu_823_p2;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        output_image_d0 = ap_const_lv32_0;
    end else begin
        output_image_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == tmp_4_reg_866)) | ((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_21_reg_1029)))) begin
        output_image_we0 = 1'b1;
    end else begin
        output_image_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == tmp_5_reg_870)) | ((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_24_fu_676_p2)))) begin
        output_image_we1 = 1'b1;
    end else begin
        output_image_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((exitcond5_fu_322_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond4_fu_448_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b0 == exitcond4_fu_448_p2) & (1'b0 == or_cond7_fu_478_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (~(1'b0 == exitcond3_fu_692_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (~(1'b0 == exitcond2_fu_717_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state14 : begin
            if (~(1'b0 == exitcond1_fu_773_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (~(1'b0 == exitcond_fu_793_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs1_fu_656_p3 = ((abscond1_fu_651_p2[0:0] === 1'b1) ? y_dir_reg_1022 : neg1_fu_646_p2);

assign abs_fu_639_p3 = ((abscond_fu_634_p2[0:0] === 1'b1) ? x_dir_reg_1015 : neg_fu_629_p2);

assign abscond1_fu_651_p2 = (($signed(y_dir_reg_1022) > $signed(32'b00000000000000000000000000000000)) ? 1'b1 : 1'b0);

assign abscond_fu_634_p2 = (($signed(x_dir_reg_1015) > $signed(32'b00000000000000000000000000000000)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state51 = ap_CS_fsm[ap_const_lv32_32];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign c_1_fu_729_p2 = (c_reg_233 + ap_const_lv8_1);

assign d_1_fu_723_p2 = (d_reg_245 + ap_const_lv8_1);

assign exitcond1_fu_773_p2 = ((k_reg_256 == ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign exitcond2_fu_717_p2 = ((d_reg_245 == ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign exitcond3_fu_692_p2 = ((c_reg_233 == ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign exitcond4_fu_448_p2 = ((j_reg_221 == ap_const_lv9_100) ? 1'b1 : 1'b0);

assign exitcond5_fu_322_p2 = ((i_reg_210 == ap_const_lv9_100) ? 1'b1 : 1'b0);

assign exitcond_fu_793_p2 = ((l_reg_268 == ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign grp_fu_823_p0 = (tmp_44_fu_811_p2 - image_q0);

assign i_1_fu_328_p2 = (i_reg_210 + ap_const_lv9_1);

assign image_d0 = (abs_fu_639_p3 + abs1_fu_656_p3);

assign j_1_fu_454_p2 = (j_reg_221 + ap_const_lv9_1);

assign j_cast8_cast1_fu_399_p1 = j_reg_221;

assign j_cast8_cast_fu_403_p1 = j_reg_221;

assign j_cast8_fu_394_p1 = j_reg_221;

assign k_1_fu_805_p2 = (k_reg_256 + ap_const_lv8_1);

assign l_1_fu_799_p2 = (ap_const_lv8_1 + l_reg_268);

assign max_6_max_1_fu_741_p3 = ((tmp_2_fu_735_p2[0:0] === 1'b1) ? image_q0 : min_fu_56);

assign max_fu_755_p3 = ((tmp_20_fu_749_p2[0:0] === 1'b1) ? image_q0 : min_1_fu_60);

assign neg1_fu_646_p2 = (ap_const_lv32_0 - y_dir_reg_1022);

assign neg_fu_629_p2 = (ap_const_lv32_0 - x_dir_reg_1015);

assign or_cond7_fu_478_p2 = (tmp2_fu_472_p2 & tmp1_reg_881);

assign output_image_d1 = ap_const_lv32_0;

assign sum_fu_370_p2 = ($signed(i_reg_210) + $signed(ap_const_lv9_1FF));

assign tmp1_fu_388_p2 = (tmp_fu_334_p2 & tmp_1_fu_340_p2);

assign tmp2_fu_472_p2 = (tmp_7_fu_460_p2 & tmp_8_fu_466_p2);

assign tmp3_fu_584_p2 = (tmp_40_fu_579_p2 + input_image_load_2_reg_989);

assign tmp_10_fu_307_p2 = (tmp_s_fu_290_p3 | ap_const_lv17_FF);

assign tmp_11_fu_562_p2 = (input_image_load_2_reg_989 - reg_285);

assign tmp_12_fu_567_p2 = (tmp_11_fu_562_p2 - tmp_38_fu_551_p2);

assign tmp_13_fu_573_p2 = (tmp_39_fu_556_p2 + tmp_12_fu_567_p2);

assign tmp_14_fu_601_p2 = (tmp_13_reg_1005 - reg_285);

assign tmp_15_fu_313_p3 = {{ap_const_lv15_0}, {tmp_10_fu_307_p2}};

assign tmp_16_fu_346_p3 = {{i_1_fu_328_p2}, {ap_const_lv8_0}};

assign tmp_17_fu_589_p2 = (reg_285 + tmp3_fu_584_p2);

assign tmp_18_fu_595_p2 = (tmp_17_fu_589_p2 - input_image_q1);

assign tmp_19_fu_618_p2 = (tmp_18_reg_1010 - tmp_41_fu_612_p2);

assign tmp_1_fu_340_p2 = ((i_reg_210 < ap_const_lv9_FF) ? 1'b1 : 1'b0);

assign tmp_20_fu_749_p2 = (($signed(image_q0) < $signed(min_1_fu_60)) ? 1'b1 : 1'b0);

assign tmp_21_fu_670_p2 = ((j_reg_221 == ap_const_lv9_0) ? 1'b1 : 1'b0);

assign tmp_24_fu_676_p2 = ((j_reg_221 == ap_const_lv9_FF) ? 1'b1 : 1'b0);

assign tmp_25_fu_376_p3 = {{sum_fu_370_p2}, {ap_const_lv8_0}};

assign tmp_26_cast_fu_303_p1 = tmp_s_fu_290_p3;

assign tmp_26_fu_407_p2 = ($signed(tmp_32_cast_reg_874) + $signed(j_cast8_cast_fu_403_p1));

assign tmp_27_fu_417_p2 = (tmp_30_cast_reg_859 + j_cast8_cast_fu_403_p1);

assign tmp_28_fu_427_p2 = (j_cast8_cast1_fu_399_p1 + ap_const_lv17_FF00);

assign tmp_29_fu_438_p2 = (tmp_26_cast_reg_834 + j_cast8_cast_fu_403_p1);

assign tmp_2_fu_735_p2 = (($signed(image_q0) > $signed(min_fu_56)) ? 1'b1 : 1'b0);

assign tmp_30_cast_fu_354_p1 = tmp_16_fu_346_p3;

assign tmp_30_fu_704_p3 = {{c_reg_233}, {d_reg_245}};

assign tmp_31_fu_712_p1 = tmp_30_fu_704_p3;

assign tmp_32_cast_fu_384_p1 = $signed(tmp_25_fu_376_p3);

assign tmp_32_fu_493_p2 = ($signed(tmp_32_cast_reg_874) + $signed(tmp_9_cast_cast_fu_489_p1));

assign tmp_33_cast_fu_412_p1 = $signed(tmp_26_fu_407_p2);

assign tmp_33_fu_503_p2 = (tmp_26_cast_reg_834 + tmp_9_cast_cast_reg_938);

assign tmp_34_cast_fu_422_p1 = tmp_27_fu_417_p2;

assign tmp_34_fu_512_p2 = (tmp_30_cast_reg_859 + tmp_9_cast_cast_reg_938);

assign tmp_35_cast_fu_433_p1 = tmp_28_fu_427_p2;

assign tmp_35_fu_519_p2 = ($signed(tmp_32_cast_reg_874) + $signed(tmp_cast_cast_fu_516_p1));

assign tmp_36_cast_fu_443_p1 = tmp_29_fu_438_p2;

assign tmp_36_fu_529_p2 = (tmp_26_cast_reg_834 + tmp_cast_cast_fu_516_p1);

assign tmp_37_fu_534_p2 = (tmp_30_cast_reg_859 + tmp_cast_cast_fu_516_p1);

assign tmp_38_fu_551_p2 = input_image_load_3_reg_995 << ap_const_lv32_1;

assign tmp_39_cast_fu_498_p1 = $signed(tmp_32_fu_493_p2);

assign tmp_39_fu_556_p2 = input_image_q0 << ap_const_lv32_1;

assign tmp_3_fu_298_p1 = tmp_s_fu_290_p3;

assign tmp_40_cast_fu_507_p1 = tmp_33_fu_503_p2;

assign tmp_40_fu_579_p2 = input_image_load_1_reg_959 << ap_const_lv32_1;

assign tmp_41_cast_fu_539_p1 = tmp_34_reg_954;

assign tmp_41_fu_612_p2 = input_image_q0 << ap_const_lv32_1;

assign tmp_42_cast_fu_524_p1 = $signed(tmp_35_fu_519_p2);

assign tmp_42_fu_779_p3 = {{k_reg_256}, {l_reg_268}};

assign tmp_43_cast_fu_543_p1 = tmp_36_reg_969;

assign tmp_43_fu_787_p1 = tmp_42_fu_779_p3;

assign tmp_44_cast_fu_547_p1 = tmp_37_reg_974;

assign tmp_44_fu_811_p2 = image_q0 << ap_const_lv32_8;

assign tmp_4_fu_358_p2 = ((i_reg_210 == ap_const_lv9_0) ? 1'b1 : 1'b0);

assign tmp_5_fu_364_p2 = ((i_reg_210 == ap_const_lv9_FF) ? 1'b1 : 1'b0);

assign tmp_6_fu_698_p2 = (min_fu_56 - min_1_fu_60);

assign tmp_7_fu_460_p2 = ((j_reg_221 != ap_const_lv9_0) ? 1'b1 : 1'b0);

assign tmp_8_fu_466_p2 = ((j_reg_221 < ap_const_lv9_FF) ? 1'b1 : 1'b0);

assign tmp_9_cast_cast_fu_489_p1 = tmp_9_fu_483_p2;

assign tmp_9_fu_483_p2 = ($signed(ap_const_lv9_1FF) + $signed(j_reg_221));

assign tmp_cast_cast_fu_516_p1 = j_1_reg_928;

assign tmp_fu_334_p2 = ((i_reg_210 != ap_const_lv9_0) ? 1'b1 : 1'b0);

assign tmp_s_fu_290_p3 = {{i_reg_210}, {ap_const_lv8_0}};

assign x_dir_fu_606_p2 = (tmp_14_fu_601_p2 + input_image_q1);

assign y_dir_fu_623_p2 = (tmp_19_fu_618_p2 - input_image_q1);

always @ (posedge ap_clk) begin
    tmp_26_cast_reg_834[7:0] <= 8'b00000000;
    tmp_26_cast_reg_834[17] <= 1'b0;
    output_image_addr_3_reg_841[7:0] <= 8'b00000000;
    output_image_addr_4_reg_846[7:0] <= 8'b11111111;
    tmp_30_cast_reg_859[7:0] <= 8'b00000000;
    tmp_30_cast_reg_859[17] <= 1'b0;
    tmp_32_cast_reg_874[7:0] <= 8'b00000000;
    output_image_addr_reg_910[15:9] <= 7'b0000000;
    tmp_9_cast_cast_reg_938[17:9] <= 9'b000000000;
end

endmodule //sobel
