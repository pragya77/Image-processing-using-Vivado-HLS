-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_image_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_image_ce0 : OUT STD_LOGIC;
    input_image_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_image_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_image_ce1 : OUT STD_LOGIC;
    input_image_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_image_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_image_ce0 : OUT STD_LOGIC;
    output_image_we0 : OUT STD_LOGIC;
    output_image_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_image_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_image_ce1 : OUT STD_LOGIC;
    output_image_we1 : OUT STD_LOGIC;
    output_image_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sobel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel,hls_ip_2016_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.107500,HLS_SYN_LAT=2845336,HLS_SYN_TPT=none,HLS_SYN_MEM=128,HLS_SYN_DSP=0,HLS_SYN_FF=960,HLS_SYN_LUT=1514}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_101 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv17_FF : STD_LOGIC_VECTOR (16 downto 0) := "00000000011111111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv17_FF00 : STD_LOGIC_VECTOR (16 downto 0) := "01111111100000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_26_cast_fu_303_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_26_cast_reg_834 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal output_image_addr_3_reg_841 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_image_addr_4_reg_846 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_1_fu_328_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_854 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_30_cast_fu_354_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_30_cast_reg_859 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond5_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_866 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_870 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_cast_fu_384_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_32_cast_reg_874 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_reg_881 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal input_image_addr_6_reg_905 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_image_addr_reg_910 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_image_addr_2_reg_915 : STD_LOGIC_VECTOR (15 downto 0);
    signal image_addr_1_reg_920 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_1_fu_454_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_928 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_cond7_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_cast_cast_fu_489_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_9_cast_cast_reg_938 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_34_fu_512_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_34_reg_954 : STD_LOGIC_VECTOR (17 downto 0);
    signal input_image_load_1_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_529_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_36_reg_969 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_37_fu_534_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_37_reg_974 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal input_image_load_2_reg_989 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_image_load_3_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_1005 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_1010 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_dir_fu_606_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_dir_reg_1015 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal y_dir_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_dir_reg_1022 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1029 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_6_fu_698_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1039 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal exitcond3_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal d_1_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_1_reg_1052 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond2_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_fu_729_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_image_addr_1_reg_1065 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal l_1_fu_799_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_1_reg_1078 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_805_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal image_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal image_ce0 : STD_LOGIC;
    signal image_we0 : STD_LOGIC;
    signal image_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_210 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_221 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal c_reg_233 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal d_reg_245 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal k_reg_256 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_reg_268 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond1_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_313_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_cast_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_cast_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast8_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_cast_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_cast_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_cast_fu_498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_cast_fu_507_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_cast_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_cast_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_cast_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_cast_fu_547_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_787_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_fu_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_6_max_1_fu_741_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_1_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_fu_755_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_823_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_290_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_307_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_fu_346_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sum_fu_370_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_25_fu_376_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast8_cast_fu_403_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_26_fu_407_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_27_fu_417_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal j_cast8_cast1_fu_399_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_fu_427_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_29_fu_438_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_7_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_483_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_32_fu_493_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_33_fu_503_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_cast_cast_fu_516_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_35_fu_519_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_11_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_551_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_601_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_612_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_618_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond1_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg1_fu_646_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_fu_639_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs1_fu_656_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_704_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_779_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_44_fu_811_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_823_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_823_ap_start : STD_LOGIC;
    signal grp_fu_823_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);

    component sobel_sdiv_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_image IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    image_U : component sobel_image
    generic map (
        DataWidth => 32,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => image_address0,
        ce0 => image_ce0,
        we0 => image_we0,
        d0 => image_d0,
        q0 => image_q0);

    sobel_sdiv_32ns_3bkb_U0 : component sobel_sdiv_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_823_ap_start,
        done => grp_fu_823_ap_done,
        din0 => grp_fu_823_p0,
        din1 => tmp_6_reg_1039,
        ce => ap_const_logic_1,
        dout => grp_fu_823_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12) and not((ap_const_lv1_0 = exitcond2_fu_717_p2)))) then 
                c_reg_233 <= c_1_fu_729_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
                c_reg_233 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    d_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond3_fu_692_p2))) then 
                d_reg_245 <= ap_const_lv8_1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                d_reg_245 <= d_1_reg_1052;
            end if; 
        end if;
    end process;

    i_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond4_fu_448_p2)))) then 
                i_reg_210 <= i_1_reg_854;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_210 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond5_fu_322_p2 = ap_const_lv1_0))) then 
                j_reg_221 <= ap_const_lv9_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                j_reg_221 <= j_1_reg_928;
            end if; 
        end if;
    end process;

    k_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11) and not((ap_const_lv1_0 = exitcond3_fu_692_p2)))) then 
                k_reg_256 <= ap_const_lv8_1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state15) and not((ap_const_lv1_0 = exitcond_fu_793_p2)))) then 
                k_reg_256 <= k_1_fu_805_p2;
            end if; 
        end if;
    end process;

    l_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond1_fu_773_p2))) then 
                l_reg_268 <= ap_const_lv8_1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state51))) then 
                l_reg_268 <= l_1_reg_1078;
            end if; 
        end if;
    end process;

    min_1_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                min_1_fu_60 <= max_fu_755_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
                min_1_fu_60 <= image_q0;
            end if; 
        end if;
    end process;

    min_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                min_fu_56 <= max_6_max_1_fu_741_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
                min_fu_56 <= image_q0;
            end if; 
        end if;
    end process;

    reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                reg_285 <= input_image_q1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
                reg_285 <= input_image_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = exitcond2_fu_717_p2))) then
                d_1_reg_1052 <= d_1_fu_723_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_1_reg_854 <= i_1_fu_328_p2;
                    output_image_addr_3_reg_841(15 downto 8) <= tmp_3_fu_298_p1(16 - 1 downto 0)(15 downto 8);
                    output_image_addr_4_reg_846(15 downto 8) <= tmp_15_fu_313_p3(16 - 1 downto 0)(15 downto 8);
                    tmp_26_cast_reg_834(16 downto 8) <= tmp_26_cast_fu_303_p1(16 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                image_addr_1_reg_920 <= tmp_36_cast_fu_443_p1(16 - 1 downto 0);
                input_image_addr_6_reg_905 <= tmp_34_cast_fu_422_p1(16 - 1 downto 0);
                j_1_reg_928 <= j_1_fu_454_p2;
                output_image_addr_2_reg_915 <= tmp_35_cast_fu_433_p1(16 - 1 downto 0);
                    output_image_addr_reg_910(8 downto 0) <= j_cast8_fu_394_p1(16 - 1 downto 0)(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                input_image_load_1_reg_959 <= input_image_q1;
                tmp_34_reg_954 <= tmp_34_fu_512_p2;
                tmp_36_reg_969 <= tmp_36_fu_529_p2;
                tmp_37_reg_974 <= tmp_37_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                input_image_load_2_reg_989 <= input_image_q0;
                input_image_load_3_reg_995 <= input_image_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond_fu_793_p2))) then
                l_1_reg_1078 <= l_1_fu_799_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_448_p2))) then
                or_cond7_reg_934 <= or_cond7_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                output_image_addr_1_reg_1065 <= tmp_43_fu_787_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond5_fu_322_p2 = ap_const_lv1_0))) then
                tmp1_reg_881 <= tmp1_fu_388_p2;
                    tmp_30_cast_reg_859(16 downto 8) <= tmp_30_cast_fu_354_p1(16 downto 8);
                    tmp_32_cast_reg_874(17 downto 8) <= tmp_32_cast_fu_384_p1(17 downto 8);
                tmp_4_reg_866 <= tmp_4_fu_358_p2;
                tmp_5_reg_870 <= tmp_5_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                tmp_13_reg_1005 <= tmp_13_fu_573_p2;
                tmp_18_reg_1010 <= tmp_18_fu_595_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                tmp_21_reg_1029 <= tmp_21_fu_670_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11) and not((ap_const_lv1_0 = exitcond3_fu_692_p2)))) then
                tmp_6_reg_1039 <= tmp_6_fu_698_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_448_p2) and not((ap_const_lv1_0 = or_cond7_fu_478_p2)))) then
                    tmp_9_cast_cast_reg_938(8 downto 0) <= tmp_9_cast_cast_fu_489_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then
                x_dir_reg_1015 <= x_dir_fu_606_p2;
                y_dir_reg_1022 <= y_dir_fu_623_p2;
            end if;
        end if;
    end process;
    tmp_26_cast_reg_834(7 downto 0) <= "00000000";
    tmp_26_cast_reg_834(17) <= '0';
    output_image_addr_3_reg_841(7 downto 0) <= "00000000";
    output_image_addr_4_reg_846(7 downto 0) <= "11111111";
    tmp_30_cast_reg_859(7 downto 0) <= "00000000";
    tmp_30_cast_reg_859(17) <= '0';
    tmp_32_cast_reg_874(7 downto 0) <= "00000000";
    output_image_addr_reg_910(15 downto 9) <= "0000000";
    tmp_9_cast_cast_reg_938(17 downto 9) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond5_fu_322_p2, or_cond7_fu_478_p2, exitcond4_fu_448_p2, exitcond3_fu_692_p2, exitcond2_fu_717_p2, exitcond_fu_793_p2, exitcond1_fu_773_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((exitcond5_fu_322_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_448_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_lv1_0 = exitcond4_fu_448_p2) and (ap_const_lv1_0 = or_cond7_fu_478_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_692_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_717_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_773_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (not((ap_const_lv1_0 = exitcond_fu_793_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    abs1_fu_656_p3 <= 
        y_dir_reg_1022 when (abscond1_fu_651_p2(0) = '1') else 
        neg1_fu_646_p2;
    abs_fu_639_p3 <= 
        x_dir_reg_1015 when (abscond_fu_634_p2(0) = '1') else 
        neg_fu_629_p2;
    abscond1_fu_651_p2 <= "1" when (signed(y_dir_reg_1022) > signed(ap_const_lv32_0)) else "0";
    abscond_fu_634_p2 <= "1" when (signed(x_dir_reg_1015) > signed(ap_const_lv32_0)) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state51 <= ap_CS_fsm(50 downto 50);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_CS_fsm_state14, exitcond1_fu_773_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state14) and not((ap_const_lv1_0 = exitcond1_fu_773_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, exitcond1_fu_773_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state14) and not((ap_const_lv1_0 = exitcond1_fu_773_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_729_p2 <= std_logic_vector(unsigned(c_reg_233) + unsigned(ap_const_lv8_1));
    d_1_fu_723_p2 <= std_logic_vector(unsigned(d_reg_245) + unsigned(ap_const_lv8_1));
    exitcond1_fu_773_p2 <= "1" when (k_reg_256 = ap_const_lv8_FF) else "0";
    exitcond2_fu_717_p2 <= "1" when (d_reg_245 = ap_const_lv8_FF) else "0";
    exitcond3_fu_692_p2 <= "1" when (c_reg_233 = ap_const_lv8_FF) else "0";
    exitcond4_fu_448_p2 <= "1" when (j_reg_221 = ap_const_lv9_100) else "0";
    exitcond5_fu_322_p2 <= "1" when (i_reg_210 = ap_const_lv9_100) else "0";
    exitcond_fu_793_p2 <= "1" when (l_reg_268 = ap_const_lv8_FF) else "0";

    grp_fu_823_ap_start_assign_proc : process(ap_CS_fsm_state16)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            grp_fu_823_ap_start <= ap_const_logic_1;
        else 
            grp_fu_823_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_823_p0 <= std_logic_vector(unsigned(tmp_44_fu_811_p2) - unsigned(image_q0));
    i_1_fu_328_p2 <= std_logic_vector(unsigned(i_reg_210) + unsigned(ap_const_lv9_1));

    image_address0_assign_proc : process(ap_CS_fsm_state2, image_addr_1_reg_920, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state15, tmp_31_fu_712_p1, tmp_43_fu_787_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            image_address0 <= tmp_43_fu_787_p1(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            image_address0 <= tmp_31_fu_712_p1(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            image_address0 <= image_addr_1_reg_920;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            image_address0 <= ap_const_lv32_101(16 - 1 downto 0);
        else 
            image_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state15)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)))) then 
            image_ce0 <= ap_const_logic_1;
        else 
            image_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    image_d0 <= std_logic_vector(unsigned(abs_fu_639_p3) + unsigned(abs1_fu_656_p3));

    image_we0_assign_proc : process(or_cond7_reg_934, ap_CS_fsm_state8)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_lv1_0 = or_cond7_reg_934))))) then 
            image_we0 <= ap_const_logic_1;
        else 
            image_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_image_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state3, input_image_addr_6_reg_905, ap_CS_fsm_state5, tmp_39_cast_fu_498_p1, tmp_42_cast_fu_524_p1, tmp_43_cast_fu_543_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            input_image_address0 <= input_image_addr_6_reg_905;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            input_image_address0 <= tmp_43_cast_fu_543_p1(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            input_image_address0 <= tmp_42_cast_fu_524_p1(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            input_image_address0 <= tmp_39_cast_fu_498_p1(16 - 1 downto 0);
        else 
            input_image_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_image_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_33_cast_fu_412_p1, tmp_40_cast_fu_507_p1, tmp_41_cast_fu_539_p1, tmp_44_cast_fu_547_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            input_image_address1 <= tmp_44_cast_fu_547_p1(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            input_image_address1 <= tmp_41_cast_fu_539_p1(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            input_image_address1 <= tmp_40_cast_fu_507_p1(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            input_image_address1 <= tmp_33_cast_fu_412_p1(16 - 1 downto 0);
        else 
            input_image_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_image_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state5)))) then 
            input_image_ce0 <= ap_const_logic_1;
        else 
            input_image_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_image_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state5)))) then 
            input_image_ce1 <= ap_const_logic_1;
        else 
            input_image_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_454_p2 <= std_logic_vector(unsigned(j_reg_221) + unsigned(ap_const_lv9_1));
    j_cast8_cast1_fu_399_p1 <= std_logic_vector(resize(unsigned(j_reg_221),17));
    j_cast8_cast_fu_403_p1 <= std_logic_vector(resize(unsigned(j_reg_221),18));
    j_cast8_fu_394_p1 <= std_logic_vector(resize(unsigned(j_reg_221),32));
    k_1_fu_805_p2 <= std_logic_vector(unsigned(k_reg_256) + unsigned(ap_const_lv8_1));
    l_1_fu_799_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(l_reg_268));
    max_6_max_1_fu_741_p3 <= 
        image_q0 when (tmp_2_fu_735_p2(0) = '1') else 
        min_fu_56;
    max_fu_755_p3 <= 
        image_q0 when (tmp_20_fu_749_p2(0) = '1') else 
        min_1_fu_60;
    neg1_fu_646_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(y_dir_reg_1022));
    neg_fu_629_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(x_dir_reg_1015));
    or_cond7_fu_478_p2 <= (tmp2_fu_472_p2 and tmp1_reg_881);

    output_image_address0_assign_proc : process(output_image_addr_3_reg_841, output_image_addr_reg_910, ap_CS_fsm_state8, output_image_addr_1_reg_1065, ap_CS_fsm_state9, ap_CS_fsm_state51)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state51))) then 
            output_image_address0 <= output_image_addr_1_reg_1065;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            output_image_address0 <= output_image_addr_3_reg_841;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            output_image_address0 <= output_image_addr_reg_910;
        else 
            output_image_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_image_address1_assign_proc : process(output_image_addr_4_reg_846, output_image_addr_2_reg_915, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            output_image_address1 <= output_image_addr_4_reg_846;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            output_image_address1 <= output_image_addr_2_reg_915;
        else 
            output_image_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_image_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state51)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state51)))) then 
            output_image_ce0 <= ap_const_logic_1;
        else 
            output_image_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_image_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)))) then 
            output_image_ce1 <= ap_const_logic_1;
        else 
            output_image_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_image_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state51, grp_fu_823_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state51))) then 
            output_image_d0 <= grp_fu_823_p2;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)))) then 
            output_image_d0 <= ap_const_lv32_0;
        else 
            output_image_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    output_image_d1 <= ap_const_lv32_0;

    output_image_we0_assign_proc : process(tmp_4_reg_866, tmp_21_reg_1029, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state51)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state51)) or ((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_lv1_0 = tmp_4_reg_866))) or ((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_21_reg_1029))))) then 
            output_image_we0 <= ap_const_logic_1;
        else 
            output_image_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_image_we1_assign_proc : process(tmp_5_reg_870, ap_CS_fsm_state8, ap_CS_fsm_state9, tmp_24_fu_676_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_lv1_0 = tmp_5_reg_870))) or ((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_24_fu_676_p2))))) then 
            output_image_we1 <= ap_const_logic_1;
        else 
            output_image_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum_fu_370_p2 <= std_logic_vector(unsigned(i_reg_210) + unsigned(ap_const_lv9_1FF));
    tmp1_fu_388_p2 <= (tmp_fu_334_p2 and tmp_1_fu_340_p2);
    tmp2_fu_472_p2 <= (tmp_7_fu_460_p2 and tmp_8_fu_466_p2);
    tmp3_fu_584_p2 <= std_logic_vector(unsigned(tmp_40_fu_579_p2) + unsigned(input_image_load_2_reg_989));
    tmp_10_fu_307_p2 <= (tmp_s_fu_290_p3 or ap_const_lv17_FF);
    tmp_11_fu_562_p2 <= std_logic_vector(unsigned(input_image_load_2_reg_989) - unsigned(reg_285));
    tmp_12_fu_567_p2 <= std_logic_vector(unsigned(tmp_11_fu_562_p2) - unsigned(tmp_38_fu_551_p2));
    tmp_13_fu_573_p2 <= std_logic_vector(unsigned(tmp_39_fu_556_p2) + unsigned(tmp_12_fu_567_p2));
    tmp_14_fu_601_p2 <= std_logic_vector(unsigned(tmp_13_reg_1005) - unsigned(reg_285));
    tmp_15_fu_313_p3 <= (ap_const_lv15_0 & tmp_10_fu_307_p2);
    tmp_16_fu_346_p3 <= (i_1_fu_328_p2 & ap_const_lv8_0);
    tmp_17_fu_589_p2 <= std_logic_vector(unsigned(reg_285) + unsigned(tmp3_fu_584_p2));
    tmp_18_fu_595_p2 <= std_logic_vector(unsigned(tmp_17_fu_589_p2) - unsigned(input_image_q1));
    tmp_19_fu_618_p2 <= std_logic_vector(unsigned(tmp_18_reg_1010) - unsigned(tmp_41_fu_612_p2));
    tmp_1_fu_340_p2 <= "1" when (unsigned(i_reg_210) < unsigned(ap_const_lv9_FF)) else "0";
    tmp_20_fu_749_p2 <= "1" when (signed(image_q0) < signed(min_1_fu_60)) else "0";
    tmp_21_fu_670_p2 <= "1" when (j_reg_221 = ap_const_lv9_0) else "0";
    tmp_24_fu_676_p2 <= "1" when (j_reg_221 = ap_const_lv9_FF) else "0";
    tmp_25_fu_376_p3 <= (sum_fu_370_p2 & ap_const_lv8_0);
    tmp_26_cast_fu_303_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_290_p3),18));
    tmp_26_fu_407_p2 <= std_logic_vector(signed(tmp_32_cast_reg_874) + signed(j_cast8_cast_fu_403_p1));
    tmp_27_fu_417_p2 <= std_logic_vector(unsigned(tmp_30_cast_reg_859) + unsigned(j_cast8_cast_fu_403_p1));
    tmp_28_fu_427_p2 <= std_logic_vector(unsigned(j_cast8_cast1_fu_399_p1) + unsigned(ap_const_lv17_FF00));
    tmp_29_fu_438_p2 <= std_logic_vector(unsigned(tmp_26_cast_reg_834) + unsigned(j_cast8_cast_fu_403_p1));
    tmp_2_fu_735_p2 <= "1" when (signed(image_q0) > signed(min_fu_56)) else "0";
    tmp_30_cast_fu_354_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_346_p3),18));
    tmp_30_fu_704_p3 <= (c_reg_233 & d_reg_245);
    tmp_31_fu_712_p1 <= std_logic_vector(resize(unsigned(tmp_30_fu_704_p3),32));
        tmp_32_cast_fu_384_p1 <= std_logic_vector(resize(signed(tmp_25_fu_376_p3),18));

    tmp_32_fu_493_p2 <= std_logic_vector(signed(tmp_32_cast_reg_874) + signed(tmp_9_cast_cast_fu_489_p1));
        tmp_33_cast_fu_412_p1 <= std_logic_vector(resize(signed(tmp_26_fu_407_p2),32));

    tmp_33_fu_503_p2 <= std_logic_vector(unsigned(tmp_26_cast_reg_834) + unsigned(tmp_9_cast_cast_reg_938));
    tmp_34_cast_fu_422_p1 <= std_logic_vector(resize(unsigned(tmp_27_fu_417_p2),32));
    tmp_34_fu_512_p2 <= std_logic_vector(unsigned(tmp_30_cast_reg_859) + unsigned(tmp_9_cast_cast_reg_938));
    tmp_35_cast_fu_433_p1 <= std_logic_vector(resize(unsigned(tmp_28_fu_427_p2),32));
    tmp_35_fu_519_p2 <= std_logic_vector(signed(tmp_32_cast_reg_874) + signed(tmp_cast_cast_fu_516_p1));
    tmp_36_cast_fu_443_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_438_p2),32));
    tmp_36_fu_529_p2 <= std_logic_vector(unsigned(tmp_26_cast_reg_834) + unsigned(tmp_cast_cast_fu_516_p1));
    tmp_37_fu_534_p2 <= std_logic_vector(unsigned(tmp_30_cast_reg_859) + unsigned(tmp_cast_cast_fu_516_p1));
    tmp_38_fu_551_p2 <= std_logic_vector(shift_left(unsigned(input_image_load_3_reg_995),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
        tmp_39_cast_fu_498_p1 <= std_logic_vector(resize(signed(tmp_32_fu_493_p2),32));

    tmp_39_fu_556_p2 <= std_logic_vector(shift_left(unsigned(input_image_q0),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_3_fu_298_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_290_p3),32));
    tmp_40_cast_fu_507_p1 <= std_logic_vector(resize(unsigned(tmp_33_fu_503_p2),32));
    tmp_40_fu_579_p2 <= std_logic_vector(shift_left(unsigned(input_image_load_1_reg_959),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_41_cast_fu_539_p1 <= std_logic_vector(resize(unsigned(tmp_34_reg_954),32));
    tmp_41_fu_612_p2 <= std_logic_vector(shift_left(unsigned(input_image_q0),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
        tmp_42_cast_fu_524_p1 <= std_logic_vector(resize(signed(tmp_35_fu_519_p2),32));

    tmp_42_fu_779_p3 <= (k_reg_256 & l_reg_268);
    tmp_43_cast_fu_543_p1 <= std_logic_vector(resize(unsigned(tmp_36_reg_969),32));
    tmp_43_fu_787_p1 <= std_logic_vector(resize(unsigned(tmp_42_fu_779_p3),32));
    tmp_44_cast_fu_547_p1 <= std_logic_vector(resize(unsigned(tmp_37_reg_974),32));
    tmp_44_fu_811_p2 <= std_logic_vector(shift_left(unsigned(image_q0),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    tmp_4_fu_358_p2 <= "1" when (i_reg_210 = ap_const_lv9_0) else "0";
    tmp_5_fu_364_p2 <= "1" when (i_reg_210 = ap_const_lv9_FF) else "0";
    tmp_6_fu_698_p2 <= std_logic_vector(unsigned(min_fu_56) - unsigned(min_1_fu_60));
    tmp_7_fu_460_p2 <= "0" when (j_reg_221 = ap_const_lv9_0) else "1";
    tmp_8_fu_466_p2 <= "1" when (unsigned(j_reg_221) < unsigned(ap_const_lv9_FF)) else "0";
    tmp_9_cast_cast_fu_489_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_483_p2),18));
    tmp_9_fu_483_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(j_reg_221));
    tmp_cast_cast_fu_516_p1 <= std_logic_vector(resize(unsigned(j_1_reg_928),18));
    tmp_fu_334_p2 <= "0" when (i_reg_210 = ap_const_lv9_0) else "1";
    tmp_s_fu_290_p3 <= (i_reg_210 & ap_const_lv8_0);
    x_dir_fu_606_p2 <= std_logic_vector(unsigned(tmp_14_fu_601_p2) + unsigned(input_image_q1));
    y_dir_fu_623_p2 <= std_logic_vector(unsigned(tmp_19_fu_618_p2) - unsigned(input_image_q1));
end behav;
