// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kmeans,hls_ip_2016_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.160000,HLS_SYN_LAT=1246723,HLS_SYN_TPT=none,HLS_SYN_MEM=256,HLS_SYN_DSP=0,HLS_SYN_FF=412,HLS_SYN_LUT=863}" *)

module kmeans (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        image_in_address0,
        image_in_ce0,
        image_in_q0,
        final_address0,
        final_ce0,
        final_we0,
        final_d0
);

parameter    ap_ST_fsm_state1 = 16'b1;
parameter    ap_ST_fsm_state2 = 16'b10;
parameter    ap_ST_fsm_state3 = 16'b100;
parameter    ap_ST_fsm_state4 = 16'b1000;
parameter    ap_ST_fsm_state5 = 16'b10000;
parameter    ap_ST_fsm_state6 = 16'b100000;
parameter    ap_ST_fsm_state7 = 16'b1000000;
parameter    ap_ST_fsm_state8 = 16'b10000000;
parameter    ap_ST_fsm_state9 = 16'b100000000;
parameter    ap_ST_fsm_state10 = 16'b1000000000;
parameter    ap_ST_fsm_state11 = 16'b10000000000;
parameter    ap_ST_fsm_state12 = 16'b100000000000;
parameter    ap_ST_fsm_state13 = 16'b1000000000000;
parameter    ap_ST_fsm_state14 = 16'b10000000000000;
parameter    ap_ST_fsm_state15 = 16'b100000000000000;
parameter    ap_ST_fsm_state16 = 16'b1000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv16_32 = 16'b110010;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv16_46 = 16'b1000110;
parameter    ap_const_lv16_28 = 16'b101000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv16_DC = 16'b11011100;
parameter    ap_const_lv9_100 = 9'b100000000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_50 = 32'b1010000;
parameter    ap_const_lv32_B4 = 32'b10110100;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv16_2 = 16'b10;
parameter    ap_const_lv16_3 = 16'b11;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] image_in_address0;
output   image_in_ce0;
input  [15:0] image_in_q0;
output  [15:0] final_address0;
output   final_ce0;
output   final_we0;
output  [15:0] final_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg image_in_ce0;
reg final_ce0;
reg final_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [8:0] s_1_fu_355_p2;
reg   [8:0] s_1_reg_915;
wire   [0:0] ap_CS_fsm_state2;
wire   [15:0] tmp_1_fu_365_p3;
reg   [15:0] tmp_1_reg_920;
wire   [0:0] exitcond1_fu_349_p2;
wire   [8:0] t_1_fu_388_p2;
wire   [0:0] ap_CS_fsm_state3;
wire   [8:0] i_1_fu_413_p2;
reg   [8:0] i_1_reg_970;
wire   [0:0] ap_CS_fsm_state4;
wire   [17:0] tmp_21_cast_fu_427_p1;
reg   [17:0] tmp_21_cast_reg_975;
wire   [0:0] exitcond2_fu_407_p2;
wire   [15:0] tmp_3_fu_435_p3;
reg   [15:0] tmp_3_reg_980;
wire   [8:0] j_1_fu_449_p2;
reg   [8:0] j_1_reg_991;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] exitcond5_fu_443_p2;
wire   [15:0] tmp_cast_fu_469_p1;
reg   [15:0] tmp_cast_reg_1001;
wire   [0:0] ap_CS_fsm_state6;
reg   [15:0] r_reg_1009;
wire  signed [31:0] tmp_4_fu_473_p1;
reg  signed [31:0] tmp_4_reg_1017;
wire   [0:0] ap_CS_fsm_state7;
wire   [2:0] p_1_fu_486_p2;
wire   [15:0] min_2_phi_min1_fu_705_p3;
wire   [0:0] ap_CS_fsm_state8;
wire   [0:0] exitcond9_fu_653_p2;
wire   [2:0] p_2_fu_713_p2;
wire   [8:0] l_1_fu_799_p2;
reg   [8:0] l_1_reg_1063;
wire   [0:0] ap_CS_fsm_state9;
wire   [17:0] tmp_24_cast_fu_813_p1;
reg   [17:0] tmp_24_cast_reg_1068;
wire   [0:0] exitcond6_fu_793_p2;
wire   [15:0] tmp_9_fu_821_p3;
reg   [15:0] tmp_9_reg_1073;
wire   [8:0] q_1_fu_835_p2;
reg   [8:0] q_1_reg_1081;
wire   [0:0] ap_CS_fsm_state10;
reg   [15:0] final_addr_reg_1086;
wire   [0:0] exitcond_fu_829_p2;
wire   [31:0] p_sum_cast_fu_864_p1;
reg   [31:0] p_sum_cast_reg_1091;
reg   [15:0] p_addr_4_reg_1098;
reg   [15:0] p_addr_5_reg_1106;
wire   [0:0] ap_CS_fsm_state11;
reg   [15:0] p_addr_6_reg_1114;
wire   [0:0] ap_CS_fsm_state12;
reg   [15:0] p_addr_8_reg_1122;
wire   [0:0] ap_CS_fsm_state13;
reg   [15:0] empty_address0;
reg    empty_ce0;
reg    empty_we0;
reg   [15:0] empty_d0;
wire   [15:0] empty_q0;
reg   [15:0] empty_3_address0;
reg    empty_3_ce0;
reg    empty_3_we0;
reg   [15:0] empty_3_d0;
wire   [15:0] empty_3_q0;
reg   [15:0] empty_4_address0;
reg    empty_4_ce0;
reg    empty_4_we0;
reg   [15:0] empty_4_d0;
wire   [15:0] empty_4_q0;
reg   [15:0] empty_5_address0;
reg    empty_5_ce0;
reg    empty_5_we0;
reg   [15:0] empty_5_d0;
wire   [15:0] empty_5_q0;
reg   [8:0] s_reg_239;
wire   [0:0] exitcond3_fu_382_p2;
reg   [8:0] t_reg_250;
reg   [8:0] i_reg_261;
reg   [8:0] j_reg_272;
reg   [2:0] p_reg_284;
wire   [0:0] exitcond8_fu_480_p2;
reg   [15:0] min1_reg_295;
reg   [2:0] cluster_1_reg_304;
reg   [8:0] l_reg_315;
reg   [8:0] q_reg_326;
wire   [0:0] ap_CS_fsm_state16;
wire   [31:0] p_sum1_cast_fu_399_p1;
wire   [31:0] tmp_26_cast_fu_464_p1;
wire   [31:0] p_sum3_cast_fu_734_p1;
wire   [0:0] tmp_14_fu_724_p2;
wire   [31:0] p_sum4_cast_fu_752_p1;
wire   [0:0] tmp_17_fu_742_p2;
wire   [31:0] p_sum5_cast_fu_770_p1;
wire   [0:0] tmp_19_fu_760_p2;
wire   [31:0] p_sum6_cast_fu_788_p1;
wire   [0:0] tmp_20_fu_778_p2;
wire   [31:0] tmp_27_cast_fu_850_p1;
reg   [15:0] cluster_fu_88;
wire   [15:0] cluster_4_cluster_2_fu_697_p3;
reg   [15:0] ab_3_6_fu_92;
wire   [15:0] ab_3_14_fu_621_p3;
reg   [15:0] ab_3_9_fu_96;
wire   [15:0] ab_3_8_fu_613_p3;
reg   [15:0] ab_3_10_fu_100;
wire   [15:0] ab_3_5_fu_597_p3;
reg   [15:0] ab_3_11_fu_104;
wire   [15:0] ab_3_2_fu_573_p3;
wire   [0:0] tmp_7_fu_869_p2;
wire   [0:0] ap_CS_fsm_state15;
wire   [0:0] tmp_12_fu_875_p2;
wire   [0:0] tmp_13_fu_881_p2;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] tmp_16_fu_887_p2;
wire   [7:0] tmp_2_fu_361_p1;
wire   [15:0] t_cast_fu_378_p1;
wire   [15:0] p_sum1_fu_394_p2;
wire   [16:0] tmp_6_fu_419_p3;
wire   [7:0] tmp_5_fu_431_p1;
wire   [17:0] tmp_cast1_fu_455_p1;
wire   [17:0] tmp_21_fu_459_p2;
wire   [1:0] tmp_23_fu_492_p1;
wire   [31:0] tmp_fu_496_p6;
wire   [31:0] tmp_8_fu_510_p2;
wire   [15:0] tmp_24_fu_515_p1;
wire   [0:0] abscond_fu_519_p2;
wire   [15:0] tmp_11_fu_525_p2;
wire   [0:0] sel_tmp_fu_539_p2;
wire   [15:0] ab_0_fu_531_p3;
wire   [0:0] sel_tmp2_fu_553_p2;
wire   [15:0] ab_3_fu_545_p3;
wire   [0:0] sel_tmp4_fu_567_p2;
wire   [15:0] ab_3_1_fu_559_p3;
wire   [15:0] ab_3_3_fu_581_p3;
wire   [15:0] ab_3_4_fu_589_p3;
wire   [15:0] ab_3_7_fu_605_p3;
wire   [1:0] tmp_25_fu_659_p1;
wire   [0:0] sel_tmp3_fu_663_p2;
wire   [0:0] sel_tmp6_fu_677_p2;
wire   [15:0] ab_3_15_fu_669_p3;
wire   [15:0] ab_3_17_fu_683_p3;
wire   [0:0] tmp_15_fu_691_p2;
wire   [15:0] cluster_3_cast_fu_649_p1;
wire   [15:0] p_sum3_fu_730_p2;
wire   [15:0] p_sum4_fu_748_p2;
wire   [15:0] p_sum5_fu_766_p2;
wire   [15:0] p_sum6_fu_784_p2;
wire   [16:0] tmp_s_fu_805_p3;
wire   [7:0] tmp_10_fu_817_p1;
wire   [17:0] tmp_5_cast_fu_841_p1;
wire   [17:0] tmp_22_fu_845_p2;
wire   [15:0] tmp_11_cast_fu_855_p1;
wire   [15:0] p_sum_fu_859_p2;
wire   [15:0] tmp2_fu_899_p2;
wire   [15:0] tmp1_fu_893_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'b1;
end

kmeans_empty #(
    .DataWidth( 16 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
empty_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(empty_address0),
    .ce0(empty_ce0),
    .we0(empty_we0),
    .d0(empty_d0),
    .q0(empty_q0)
);

kmeans_empty #(
    .DataWidth( 16 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
empty_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(empty_3_address0),
    .ce0(empty_3_ce0),
    .we0(empty_3_we0),
    .d0(empty_3_d0),
    .q0(empty_3_q0)
);

kmeans_empty #(
    .DataWidth( 16 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
empty_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(empty_4_address0),
    .ce0(empty_4_ce0),
    .we0(empty_4_we0),
    .d0(empty_4_d0),
    .q0(empty_4_q0)
);

kmeans_empty #(
    .DataWidth( 16 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
empty_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(empty_5_address0),
    .ce0(empty_5_ce0),
    .we0(empty_5_we0),
    .d0(empty_5_d0),
    .q0(empty_5_q0)
);

kmeans_mux_42_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
kmeans_mux_42_32_1_U0(
    .din1(ap_const_lv32_5),
    .din2(ap_const_lv32_28),
    .din3(ap_const_lv32_50),
    .din4(ap_const_lv32_B4),
    .din5(tmp_23_fu_492_p1),
    .dout(tmp_fu_496_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(1'b0 == exitcond8_fu_480_p2))) begin
        cluster_1_reg_304 <= ap_const_lv3_1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == exitcond9_fu_653_p2))) begin
        cluster_1_reg_304 <= p_2_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == exitcond9_fu_653_p2))) begin
        cluster_fu_88 <= cluster_4_cluster_2_fu_697_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond1_fu_349_p2 == 1'b0))) begin
        cluster_fu_88 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond5_fu_443_p2))) begin
        i_reg_261 <= i_1_reg_970;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond1_fu_349_p2 == 1'b0))) begin
        i_reg_261 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == exitcond9_fu_653_p2))) begin
        j_reg_272 <= j_1_reg_991;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond2_fu_407_p2))) begin
        j_reg_272 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond2_fu_407_p2))) begin
        l_reg_315 <= ap_const_lv9_0;
    end else if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == exitcond_fu_829_p2))) begin
        l_reg_315 <= l_1_reg_1063;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(1'b0 == exitcond8_fu_480_p2))) begin
        min1_reg_295 <= ab_3_6_fu_92;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == exitcond9_fu_653_p2))) begin
        min1_reg_295 <= min_2_phi_min1_fu_705_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == exitcond8_fu_480_p2))) begin
        p_reg_284 <= p_1_fu_486_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_reg_284 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == exitcond6_fu_793_p2))) begin
        q_reg_326 <= ap_const_lv9_0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        q_reg_326 <= q_1_reg_1081;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond3_fu_382_p2))) begin
        s_reg_239 <= s_1_reg_915;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        s_reg_239 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_349_p2 == 1'b0))) begin
        t_reg_250 <= ap_const_lv9_0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond3_fu_382_p2))) begin
        t_reg_250 <= t_1_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == exitcond8_fu_480_p2))) begin
        ab_3_10_fu_100 <= ab_3_5_fu_597_p3;
        ab_3_11_fu_104 <= ab_3_2_fu_573_p3;
        ab_3_6_fu_92 <= ab_3_14_fu_621_p3;
        ab_3_9_fu_96 <= ab_3_8_fu_613_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == exitcond_fu_829_p2))) begin
        final_addr_reg_1086 <= tmp_27_cast_fu_850_p1;
        p_addr_4_reg_1098 <= p_sum_cast_fu_864_p1;
        p_sum_cast_reg_1091[15 : 0] <= p_sum_cast_fu_864_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_970 <= i_1_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_1_reg_991 <= j_1_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        l_1_reg_1063 <= l_1_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_addr_5_reg_1106 <= p_sum_cast_reg_1091;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_addr_6_reg_1114 <= p_sum_cast_reg_1091;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_addr_8_reg_1122 <= p_sum_cast_reg_1091;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        q_1_reg_1081 <= q_1_fu_835_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_reg_1009 <= image_in_q0;
        tmp_4_reg_1017 <= tmp_4_fu_473_p1;
        tmp_cast_reg_1001[8 : 0] <= tmp_cast_fu_469_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        s_1_reg_915 <= s_1_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_349_p2 == 1'b0))) begin
        tmp_1_reg_920[15 : 8] <= tmp_1_fu_365_p3[15 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond2_fu_407_p2))) begin
        tmp_21_cast_reg_975[16 : 8] <= tmp_21_cast_fu_427_p1[16 : 8];
        tmp_3_reg_980[15 : 8] <= tmp_3_fu_435_p3[15 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == exitcond6_fu_793_p2))) begin
        tmp_24_cast_reg_1068[16 : 8] <= tmp_24_cast_fu_813_p1[16 : 8];
        tmp_9_reg_1073[15 : 8] <= tmp_9_fu_821_p3[15 : 8];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == exitcond6_fu_793_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == exitcond6_fu_793_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15))) begin
        empty_3_address0 = p_addr_5_reg_1106;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        empty_3_address0 = p_sum_cast_reg_1091;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_3_address0 = p_sum4_cast_fu_752_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_3_address0 = p_sum1_cast_fu_399_p1;
    end else begin
        empty_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15))) begin
        empty_3_ce0 = 1'b1;
    end else begin
        empty_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        empty_3_d0 = ap_const_lv16_46;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_3_d0 = r_reg_1009;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_3_d0 = ap_const_lv16_0;
    end else begin
        empty_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond3_fu_382_p2)) | ((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == exitcond9_fu_653_p2) & ~(1'b0 == tmp_17_fu_742_p2)) | ((1'b1 == ap_CS_fsm_state12) & ~(1'b0 == tmp_12_fu_875_p2)))) begin
        empty_3_we0 = 1'b1;
    end else begin
        empty_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15))) begin
        empty_4_address0 = p_addr_6_reg_1114;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        empty_4_address0 = p_sum_cast_reg_1091;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_4_address0 = p_sum5_cast_fu_770_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_4_address0 = p_sum1_cast_fu_399_p1;
    end else begin
        empty_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15))) begin
        empty_4_ce0 = 1'b1;
    end else begin
        empty_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        empty_4_d0 = ap_const_lv16_28;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_4_d0 = r_reg_1009;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_4_d0 = ap_const_lv16_0;
    end else begin
        empty_4_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond3_fu_382_p2)) | ((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == exitcond9_fu_653_p2) & ~(1'b0 == tmp_19_fu_760_p2)) | ((1'b1 == ap_CS_fsm_state13) & ~(1'b0 == tmp_13_fu_881_p2)))) begin
        empty_4_we0 = 1'b1;
    end else begin
        empty_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        empty_5_address0 = p_addr_8_reg_1122;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        empty_5_address0 = p_sum_cast_reg_1091;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_5_address0 = p_sum6_cast_fu_788_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_5_address0 = p_sum1_cast_fu_399_p1;
    end else begin
        empty_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        empty_5_ce0 = 1'b1;
    end else begin
        empty_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        empty_5_d0 = ap_const_lv16_DC;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_5_d0 = r_reg_1009;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_5_d0 = ap_const_lv16_0;
    end else begin
        empty_5_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond3_fu_382_p2)) | ((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == exitcond9_fu_653_p2) & ~(1'b0 == tmp_20_fu_778_p2)) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == tmp_16_fu_887_p2)))) begin
        empty_5_we0 = 1'b1;
    end else begin
        empty_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state15))) begin
        empty_address0 = p_addr_4_reg_1098;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        empty_address0 = p_sum_cast_fu_864_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_address0 = p_sum3_cast_fu_734_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_address0 = p_sum1_cast_fu_399_p1;
    end else begin
        empty_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state15))) begin
        empty_ce0 = 1'b1;
    end else begin
        empty_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        empty_d0 = ap_const_lv16_32;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_d0 = r_reg_1009;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_d0 = ap_const_lv16_0;
    end else begin
        empty_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond3_fu_382_p2)) | ((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == exitcond9_fu_653_p2) & ~(1'b0 == tmp_14_fu_724_p2)) | ((1'b1 == ap_CS_fsm_state11) & ~(1'b0 == tmp_7_fu_869_p2)))) begin
        empty_we0 = 1'b1;
    end else begin
        empty_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        final_ce0 = 1'b1;
    end else begin
        final_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        final_we0 = 1'b1;
    end else begin
        final_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        image_in_ce0 = 1'b1;
    end else begin
        image_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(exitcond1_fu_349_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond3_fu_382_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == exitcond2_fu_407_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (~(1'b0 == exitcond5_fu_443_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (~(1'b0 == exitcond8_fu_480_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (~(1'b0 == exitcond9_fu_653_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (~(1'b0 == exitcond6_fu_793_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~(1'b0 == exitcond_fu_829_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ab_0_fu_531_p3 = ((abscond_fu_519_p2[0:0] === 1'b1) ? tmp_24_fu_515_p1 : tmp_11_fu_525_p2);

assign ab_3_14_fu_621_p3 = ((sel_tmp4_fu_567_p2[0:0] === 1'b1) ? ab_0_fu_531_p3 : ab_3_6_fu_92);

assign ab_3_15_fu_669_p3 = ((sel_tmp3_fu_663_p2[0:0] === 1'b1) ? ab_3_10_fu_100 : ab_3_11_fu_104);

assign ab_3_17_fu_683_p3 = ((sel_tmp6_fu_677_p2[0:0] === 1'b1) ? ab_3_9_fu_96 : ab_3_15_fu_669_p3);

assign ab_3_1_fu_559_p3 = ((sel_tmp2_fu_553_p2[0:0] === 1'b1) ? ab_3_11_fu_104 : ab_3_fu_545_p3);

assign ab_3_2_fu_573_p3 = ((sel_tmp4_fu_567_p2[0:0] === 1'b1) ? ab_3_11_fu_104 : ab_3_1_fu_559_p3);

assign ab_3_3_fu_581_p3 = ((sel_tmp_fu_539_p2[0:0] === 1'b1) ? ab_0_fu_531_p3 : ab_3_10_fu_100);

assign ab_3_4_fu_589_p3 = ((sel_tmp2_fu_553_p2[0:0] === 1'b1) ? ab_3_10_fu_100 : ab_3_3_fu_581_p3);

assign ab_3_5_fu_597_p3 = ((sel_tmp4_fu_567_p2[0:0] === 1'b1) ? ab_3_10_fu_100 : ab_3_4_fu_589_p3);

assign ab_3_7_fu_605_p3 = ((sel_tmp2_fu_553_p2[0:0] === 1'b1) ? ab_0_fu_531_p3 : ab_3_9_fu_96);

assign ab_3_8_fu_613_p3 = ((sel_tmp4_fu_567_p2[0:0] === 1'b1) ? ab_3_9_fu_96 : ab_3_7_fu_605_p3);

assign ab_3_fu_545_p3 = ((sel_tmp_fu_539_p2[0:0] === 1'b1) ? ab_3_11_fu_104 : ab_0_fu_531_p3);

assign abscond_fu_519_p2 = (($signed(tmp_8_fu_510_p2) > $signed(32'b00000000000000000000000000000000)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign cluster_3_cast_fu_649_p1 = cluster_1_reg_304;

assign cluster_4_cluster_2_fu_697_p3 = ((tmp_15_fu_691_p2[0:0] === 1'b1) ? cluster_3_cast_fu_649_p1 : cluster_fu_88);

assign exitcond1_fu_349_p2 = ((s_reg_239 == ap_const_lv9_100) ? 1'b1 : 1'b0);

assign exitcond2_fu_407_p2 = ((i_reg_261 == ap_const_lv9_100) ? 1'b1 : 1'b0);

assign exitcond3_fu_382_p2 = ((t_reg_250 == ap_const_lv9_100) ? 1'b1 : 1'b0);

assign exitcond5_fu_443_p2 = ((j_reg_272 == ap_const_lv9_100) ? 1'b1 : 1'b0);

assign exitcond6_fu_793_p2 = ((l_reg_315 == ap_const_lv9_100) ? 1'b1 : 1'b0);

assign exitcond8_fu_480_p2 = ((p_reg_284 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign exitcond9_fu_653_p2 = ((cluster_1_reg_304 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign exitcond_fu_829_p2 = ((q_reg_326 == ap_const_lv9_100) ? 1'b1 : 1'b0);

assign final_address0 = final_addr_reg_1086;

assign final_d0 = (tmp2_fu_899_p2 + tmp1_fu_893_p2);

assign i_1_fu_413_p2 = (i_reg_261 + ap_const_lv9_1);

assign image_in_address0 = tmp_26_cast_fu_464_p1;

assign j_1_fu_449_p2 = (j_reg_272 + ap_const_lv9_1);

assign l_1_fu_799_p2 = (l_reg_315 + ap_const_lv9_1);

assign min_2_phi_min1_fu_705_p3 = ((tmp_15_fu_691_p2[0:0] === 1'b1) ? ab_3_17_fu_683_p3 : min1_reg_295);

assign p_1_fu_486_p2 = (p_reg_284 + ap_const_lv3_1);

assign p_2_fu_713_p2 = (ap_const_lv3_1 + cluster_1_reg_304);

assign p_sum1_cast_fu_399_p1 = p_sum1_fu_394_p2;

assign p_sum1_fu_394_p2 = (tmp_1_reg_920 + t_cast_fu_378_p1);

assign p_sum3_cast_fu_734_p1 = p_sum3_fu_730_p2;

assign p_sum3_fu_730_p2 = (tmp_3_reg_980 + tmp_cast_reg_1001);

assign p_sum4_cast_fu_752_p1 = p_sum4_fu_748_p2;

assign p_sum4_fu_748_p2 = (tmp_3_reg_980 + tmp_cast_reg_1001);

assign p_sum5_cast_fu_770_p1 = p_sum5_fu_766_p2;

assign p_sum5_fu_766_p2 = (tmp_3_reg_980 + tmp_cast_reg_1001);

assign p_sum6_cast_fu_788_p1 = p_sum6_fu_784_p2;

assign p_sum6_fu_784_p2 = (tmp_3_reg_980 + tmp_cast_reg_1001);

assign p_sum_cast_fu_864_p1 = p_sum_fu_859_p2;

assign p_sum_fu_859_p2 = (tmp_11_cast_fu_855_p1 + tmp_9_reg_1073);

assign q_1_fu_835_p2 = (q_reg_326 + ap_const_lv9_1);

assign s_1_fu_355_p2 = (s_reg_239 + ap_const_lv9_1);

assign sel_tmp2_fu_553_p2 = ((tmp_23_fu_492_p1 == ap_const_lv2_1) ? 1'b1 : 1'b0);

assign sel_tmp3_fu_663_p2 = ((tmp_25_fu_659_p1 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_567_p2 = ((tmp_23_fu_492_p1 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_677_p2 = ((tmp_25_fu_659_p1 == ap_const_lv2_1) ? 1'b1 : 1'b0);

assign sel_tmp_fu_539_p2 = ((tmp_23_fu_492_p1 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign t_1_fu_388_p2 = (t_reg_250 + ap_const_lv9_1);

assign t_cast_fu_378_p1 = t_reg_250;

assign tmp1_fu_893_p2 = (empty_3_q0 + empty_q0);

assign tmp2_fu_899_p2 = (empty_4_q0 + empty_5_q0);

assign tmp_10_fu_817_p1 = l_reg_315[7:0];

assign tmp_11_cast_fu_855_p1 = q_reg_326;

assign tmp_11_fu_525_p2 = (ap_const_lv16_0 - tmp_24_fu_515_p1);

assign tmp_12_fu_875_p2 = (($signed(empty_3_q0) > $signed(16'b0000000000000000)) ? 1'b1 : 1'b0);

assign tmp_13_fu_881_p2 = (($signed(empty_4_q0) > $signed(16'b0000000000000000)) ? 1'b1 : 1'b0);

assign tmp_14_fu_724_p2 = ((cluster_fu_88 == ap_const_lv16_0) ? 1'b1 : 1'b0);

assign tmp_15_fu_691_p2 = (($signed(ab_3_17_fu_683_p3) < $signed(min1_reg_295)) ? 1'b1 : 1'b0);

assign tmp_16_fu_887_p2 = (($signed(empty_5_q0) > $signed(16'b0000000000000000)) ? 1'b1 : 1'b0);

assign tmp_17_fu_742_p2 = ((cluster_fu_88 == ap_const_lv16_1) ? 1'b1 : 1'b0);

assign tmp_19_fu_760_p2 = ((cluster_fu_88 == ap_const_lv16_2) ? 1'b1 : 1'b0);

assign tmp_1_fu_365_p3 = {{tmp_2_fu_361_p1}, {ap_const_lv8_0}};

assign tmp_20_fu_778_p2 = ((cluster_fu_88 == ap_const_lv16_3) ? 1'b1 : 1'b0);

assign tmp_21_cast_fu_427_p1 = tmp_6_fu_419_p3;

assign tmp_21_fu_459_p2 = (tmp_21_cast_reg_975 + tmp_cast1_fu_455_p1);

assign tmp_22_fu_845_p2 = (tmp_24_cast_reg_1068 + tmp_5_cast_fu_841_p1);

assign tmp_23_fu_492_p1 = p_reg_284[1:0];

assign tmp_24_cast_fu_813_p1 = tmp_s_fu_805_p3;

assign tmp_24_fu_515_p1 = tmp_8_fu_510_p2[15:0];

assign tmp_25_fu_659_p1 = cluster_1_reg_304[1:0];

assign tmp_26_cast_fu_464_p1 = tmp_21_fu_459_p2;

assign tmp_27_cast_fu_850_p1 = tmp_22_fu_845_p2;

assign tmp_2_fu_361_p1 = s_reg_239[7:0];

assign tmp_3_fu_435_p3 = {{tmp_5_fu_431_p1}, {ap_const_lv8_0}};

assign tmp_4_fu_473_p1 = $signed(image_in_q0);

assign tmp_5_cast_fu_841_p1 = q_reg_326;

assign tmp_5_fu_431_p1 = i_reg_261[7:0];

assign tmp_6_fu_419_p3 = {{i_reg_261}, {ap_const_lv8_0}};

assign tmp_7_fu_869_p2 = (($signed(empty_q0) > $signed(16'b0000000000000000)) ? 1'b1 : 1'b0);

assign tmp_8_fu_510_p2 = ($signed(tmp_4_reg_1017) - $signed(tmp_fu_496_p6));

assign tmp_9_fu_821_p3 = {{tmp_10_fu_817_p1}, {ap_const_lv8_0}};

assign tmp_cast1_fu_455_p1 = j_reg_272;

assign tmp_cast_fu_469_p1 = j_reg_272;

assign tmp_s_fu_805_p3 = {{l_reg_315}, {ap_const_lv8_0}};

always @ (posedge ap_clk) begin
    tmp_1_reg_920[7:0] <= 8'b00000000;
    tmp_21_cast_reg_975[7:0] <= 8'b00000000;
    tmp_21_cast_reg_975[17] <= 1'b0;
    tmp_3_reg_980[7:0] <= 8'b00000000;
    tmp_cast_reg_1001[15:9] <= 7'b0000000;
    tmp_24_cast_reg_1068[7:0] <= 8'b00000000;
    tmp_24_cast_reg_1068[17] <= 1'b0;
    tmp_9_reg_1073[7:0] <= 8'b00000000;
    p_sum_cast_reg_1091[31:16] <= 16'b0000000000000000;
end

endmodule //kmeans
