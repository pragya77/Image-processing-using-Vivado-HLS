-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kmeans is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_in_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_in_ce0 : OUT STD_LOGIC;
    image_in_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    final_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    final_ce0 : OUT STD_LOGIC;
    final_we0 : OUT STD_LOGIC;
    final_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of kmeans is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kmeans,hls_ip_2016_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.160000,HLS_SYN_LAT=1246723,HLS_SYN_TPT=none,HLS_SYN_MEM=256,HLS_SYN_DSP=0,HLS_SYN_FF=412,HLS_SYN_LUT=863}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_32 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000110010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_46 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000110";
    constant ap_const_lv16_28 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000101000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv16_DC : STD_LOGIC_VECTOR (15 downto 0) := "0000000011011100";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal s_1_fu_355_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal s_1_reg_915 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_365_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_920 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond1_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_1_fu_388_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_413_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_970 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_21_cast_fu_427_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_21_cast_reg_975 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond2_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_435_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_980 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_1_fu_449_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_991 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond5_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_469_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_reg_1001 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal r_reg_1009 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_473_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1017 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_1_fu_486_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal min_2_phi_min1_fu_705_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond9_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_2_fu_713_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_1_fu_799_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal l_1_reg_1063 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_24_cast_fu_813_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_24_cast_reg_1068 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond6_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_821_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_1073 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_1_fu_835_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal q_1_reg_1081 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal final_addr_reg_1086 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_sum_cast_fu_864_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_sum_cast_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr_4_reg_1098 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_addr_5_reg_1106 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_addr_6_reg_1114 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_addr_8_reg_1122 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal empty_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_ce0 : STD_LOGIC;
    signal empty_we0 : STD_LOGIC;
    signal empty_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_3_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_3_ce0 : STD_LOGIC;
    signal empty_3_we0 : STD_LOGIC;
    signal empty_3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_4_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_4_ce0 : STD_LOGIC;
    signal empty_4_we0 : STD_LOGIC;
    signal empty_4_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_4_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_5_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_5_ce0 : STD_LOGIC;
    signal empty_5_we0 : STD_LOGIC;
    signal empty_5_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_5_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_reg_239 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond3_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_reg_250 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_261 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_272 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_reg_284 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond8_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min1_reg_295 : STD_LOGIC_VECTOR (15 downto 0);
    signal cluster_1_reg_304 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_reg_315 : STD_LOGIC_VECTOR (8 downto 0);
    signal q_reg_326 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_sum1_cast_fu_399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_cast_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_sum3_cast_fu_734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_sum4_cast_fu_752_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_sum5_cast_fu_770_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_sum6_cast_fu_788_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_cast_fu_850_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cluster_fu_88 : STD_LOGIC_VECTOR (15 downto 0);
    signal cluster_4_cluster_2_fu_697_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ab_3_6_fu_92 : STD_LOGIC_VECTOR (15 downto 0);
    signal ab_3_14_fu_621_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ab_3_9_fu_96 : STD_LOGIC_VECTOR (15 downto 0);
    signal ab_3_8_fu_613_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ab_3_10_fu_100 : STD_LOGIC_VECTOR (15 downto 0);
    signal ab_3_5_fu_597_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ab_3_11_fu_104 : STD_LOGIC_VECTOR (15 downto 0);
    signal ab_3_2_fu_573_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_12_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_16_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_361_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_cast_fu_378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_sum1_fu_394_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_419_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_fu_431_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast1_fu_455_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_21_fu_459_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_23_fu_492_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_496_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_515_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal abscond_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_525_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ab_0_fu_531_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp2_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ab_3_fu_545_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp4_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ab_3_1_fu_559_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ab_3_3_fu_581_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ab_3_4_fu_589_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ab_3_7_fu_605_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_659_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp3_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ab_3_15_fu_669_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ab_3_17_fu_683_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cluster_3_cast_fu_649_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_sum3_fu_730_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_sum4_fu_748_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_sum5_fu_766_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_sum6_fu_784_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_805_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_817_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast_fu_841_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_22_fu_845_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_11_cast_fu_855_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_sum_fu_859_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_899_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_893_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component kmeans_mux_42_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_empty IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    empty_U : component kmeans_empty
    generic map (
        DataWidth => 16,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => empty_address0,
        ce0 => empty_ce0,
        we0 => empty_we0,
        d0 => empty_d0,
        q0 => empty_q0);

    empty_3_U : component kmeans_empty
    generic map (
        DataWidth => 16,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => empty_3_address0,
        ce0 => empty_3_ce0,
        we0 => empty_3_we0,
        d0 => empty_3_d0,
        q0 => empty_3_q0);

    empty_4_U : component kmeans_empty
    generic map (
        DataWidth => 16,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => empty_4_address0,
        ce0 => empty_4_ce0,
        we0 => empty_4_we0,
        d0 => empty_4_d0,
        q0 => empty_4_q0);

    empty_5_U : component kmeans_empty
    generic map (
        DataWidth => 16,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => empty_5_address0,
        ce0 => empty_5_ce0,
        we0 => empty_5_we0,
        d0 => empty_5_d0,
        q0 => empty_5_q0);

    kmeans_mux_42_32_1_U0 : component kmeans_mux_42_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => ap_const_lv32_5,
        din2 => ap_const_lv32_28,
        din3 => ap_const_lv32_50,
        din4 => ap_const_lv32_B4,
        din5 => tmp_23_fu_492_p1,
        dout => tmp_fu_496_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    cluster_1_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and not((ap_const_lv1_0 = exitcond8_fu_480_p2)))) then 
                cluster_1_reg_304 <= ap_const_lv3_1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond9_fu_653_p2))) then 
                cluster_1_reg_304 <= p_2_fu_713_p2;
            end if; 
        end if;
    end process;

    cluster_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond9_fu_653_p2))) then 
                cluster_fu_88 <= cluster_4_cluster_2_fu_697_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond1_fu_349_p2 = ap_const_lv1_0)))) then 
                cluster_fu_88 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond5_fu_443_p2)))) then 
                i_reg_261 <= i_1_reg_970;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond1_fu_349_p2 = ap_const_lv1_0)))) then 
                i_reg_261 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_lv1_0 = exitcond9_fu_653_p2)))) then 
                j_reg_272 <= j_1_reg_991;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_407_p2))) then 
                j_reg_272 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    l_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond2_fu_407_p2)))) then 
                l_reg_315 <= ap_const_lv9_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_lv1_0 = exitcond_fu_829_p2)))) then 
                l_reg_315 <= l_1_reg_1063;
            end if; 
        end if;
    end process;

    min1_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and not((ap_const_lv1_0 = exitcond8_fu_480_p2)))) then 
                min1_reg_295 <= ab_3_6_fu_92;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond9_fu_653_p2))) then 
                min1_reg_295 <= min_2_phi_min1_fu_705_p3;
            end if; 
        end if;
    end process;

    p_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond8_fu_480_p2))) then 
                p_reg_284 <= p_1_fu_486_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                p_reg_284 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    q_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond6_fu_793_p2))) then 
                q_reg_326 <= ap_const_lv9_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                q_reg_326 <= q_1_reg_1081;
            end if; 
        end if;
    end process;

    s_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond3_fu_382_p2)))) then 
                s_reg_239 <= s_1_reg_915;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                s_reg_239 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    t_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond1_fu_349_p2 = ap_const_lv1_0))) then 
                t_reg_250 <= ap_const_lv9_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_382_p2))) then 
                t_reg_250 <= t_1_fu_388_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond8_fu_480_p2))) then
                ab_3_10_fu_100 <= ab_3_5_fu_597_p3;
                ab_3_11_fu_104 <= ab_3_2_fu_573_p3;
                ab_3_6_fu_92 <= ab_3_14_fu_621_p3;
                ab_3_9_fu_96 <= ab_3_8_fu_613_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_fu_829_p2))) then
                final_addr_reg_1086 <= tmp_27_cast_fu_850_p1(16 - 1 downto 0);
                p_addr_4_reg_1098 <= p_sum_cast_fu_864_p1(16 - 1 downto 0);
                    p_sum_cast_reg_1091(15 downto 0) <= p_sum_cast_fu_864_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                i_1_reg_970 <= i_1_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                j_1_reg_991 <= j_1_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                l_1_reg_1063 <= l_1_fu_799_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then
                p_addr_5_reg_1106 <= p_sum_cast_reg_1091(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then
                p_addr_6_reg_1114 <= p_sum_cast_reg_1091(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then
                p_addr_8_reg_1122 <= p_sum_cast_reg_1091(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                q_1_reg_1081 <= q_1_fu_835_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                r_reg_1009 <= image_in_q0;
                tmp_4_reg_1017 <= tmp_4_fu_473_p1;
                    tmp_cast_reg_1001(8 downto 0) <= tmp_cast_fu_469_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                s_1_reg_915 <= s_1_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond1_fu_349_p2 = ap_const_lv1_0))) then
                    tmp_1_reg_920(15 downto 8) <= tmp_1_fu_365_p3(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_407_p2))) then
                    tmp_21_cast_reg_975(16 downto 8) <= tmp_21_cast_fu_427_p1(16 downto 8);
                    tmp_3_reg_980(15 downto 8) <= tmp_3_fu_435_p3(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond6_fu_793_p2))) then
                    tmp_24_cast_reg_1068(16 downto 8) <= tmp_24_cast_fu_813_p1(16 downto 8);
                    tmp_9_reg_1073(15 downto 8) <= tmp_9_fu_821_p3(15 downto 8);
            end if;
        end if;
    end process;
    tmp_1_reg_920(7 downto 0) <= "00000000";
    tmp_21_cast_reg_975(7 downto 0) <= "00000000";
    tmp_21_cast_reg_975(17) <= '0';
    tmp_3_reg_980(7 downto 0) <= "00000000";
    tmp_cast_reg_1001(15 downto 9) <= "0000000";
    tmp_24_cast_reg_1068(7 downto 0) <= "00000000";
    tmp_24_cast_reg_1068(17) <= '0';
    tmp_9_reg_1073(7 downto 0) <= "00000000";
    p_sum_cast_reg_1091(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_349_p2, exitcond2_fu_407_p2, exitcond5_fu_443_p2, exitcond9_fu_653_p2, exitcond6_fu_793_p2, exitcond_fu_829_p2, exitcond3_fu_382_p2, exitcond8_fu_480_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond1_fu_349_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_382_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_407_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_443_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (not((ap_const_lv1_0 = exitcond8_fu_480_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (not((ap_const_lv1_0 = exitcond9_fu_653_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (not((ap_const_lv1_0 = exitcond6_fu_793_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (not((ap_const_lv1_0 = exitcond_fu_829_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ab_0_fu_531_p3 <= 
        tmp_24_fu_515_p1 when (abscond_fu_519_p2(0) = '1') else 
        tmp_11_fu_525_p2;
    ab_3_14_fu_621_p3 <= 
        ab_0_fu_531_p3 when (sel_tmp4_fu_567_p2(0) = '1') else 
        ab_3_6_fu_92;
    ab_3_15_fu_669_p3 <= 
        ab_3_10_fu_100 when (sel_tmp3_fu_663_p2(0) = '1') else 
        ab_3_11_fu_104;
    ab_3_17_fu_683_p3 <= 
        ab_3_9_fu_96 when (sel_tmp6_fu_677_p2(0) = '1') else 
        ab_3_15_fu_669_p3;
    ab_3_1_fu_559_p3 <= 
        ab_3_11_fu_104 when (sel_tmp2_fu_553_p2(0) = '1') else 
        ab_3_fu_545_p3;
    ab_3_2_fu_573_p3 <= 
        ab_3_11_fu_104 when (sel_tmp4_fu_567_p2(0) = '1') else 
        ab_3_1_fu_559_p3;
    ab_3_3_fu_581_p3 <= 
        ab_0_fu_531_p3 when (sel_tmp_fu_539_p2(0) = '1') else 
        ab_3_10_fu_100;
    ab_3_4_fu_589_p3 <= 
        ab_3_10_fu_100 when (sel_tmp2_fu_553_p2(0) = '1') else 
        ab_3_3_fu_581_p3;
    ab_3_5_fu_597_p3 <= 
        ab_3_10_fu_100 when (sel_tmp4_fu_567_p2(0) = '1') else 
        ab_3_4_fu_589_p3;
    ab_3_7_fu_605_p3 <= 
        ab_0_fu_531_p3 when (sel_tmp2_fu_553_p2(0) = '1') else 
        ab_3_9_fu_96;
    ab_3_8_fu_613_p3 <= 
        ab_3_9_fu_96 when (sel_tmp4_fu_567_p2(0) = '1') else 
        ab_3_7_fu_605_p3;
    ab_3_fu_545_p3 <= 
        ab_3_11_fu_104 when (sel_tmp_fu_539_p2(0) = '1') else 
        ab_0_fu_531_p3;
    abscond_fu_519_p2 <= "1" when (signed(tmp_8_fu_510_p2) > signed(ap_const_lv32_0)) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_CS_fsm_state9, exitcond6_fu_793_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = exitcond6_fu_793_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, exitcond6_fu_793_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = exitcond6_fu_793_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cluster_3_cast_fu_649_p1 <= std_logic_vector(resize(unsigned(cluster_1_reg_304),16));
    cluster_4_cluster_2_fu_697_p3 <= 
        cluster_3_cast_fu_649_p1 when (tmp_15_fu_691_p2(0) = '1') else 
        cluster_fu_88;

    empty_3_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, p_sum_cast_reg_1091, p_addr_5_reg_1106, ap_CS_fsm_state11, ap_CS_fsm_state12, p_sum1_cast_fu_399_p1, p_sum4_cast_fu_752_p1, ap_CS_fsm_state15)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)))) then 
            empty_3_address0 <= p_addr_5_reg_1106;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            empty_3_address0 <= p_sum_cast_reg_1091(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            empty_3_address0 <= p_sum4_cast_fu_752_p1(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            empty_3_address0 <= p_sum1_cast_fu_399_p1(16 - 1 downto 0);
        else 
            empty_3_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    empty_3_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state15)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)))) then 
            empty_3_ce0 <= ap_const_logic_1;
        else 
            empty_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_3_d0_assign_proc : process(ap_CS_fsm_state3, r_reg_1009, ap_CS_fsm_state8, ap_CS_fsm_state12)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            empty_3_d0 <= ap_const_lv16_46;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            empty_3_d0 <= r_reg_1009;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            empty_3_d0 <= ap_const_lv16_0;
        else 
            empty_3_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    empty_3_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, exitcond9_fu_653_p2, ap_CS_fsm_state12, exitcond3_fu_382_p2, tmp_17_fu_742_p2, tmp_12_fu_875_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_382_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_lv1_0 = exitcond9_fu_653_p2)) and not((ap_const_lv1_0 = tmp_17_fu_742_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state12) and not((ap_const_lv1_0 = tmp_12_fu_875_p2))))) then 
            empty_3_we0 <= ap_const_logic_1;
        else 
            empty_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_4_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, p_sum_cast_reg_1091, p_addr_6_reg_1114, ap_CS_fsm_state12, ap_CS_fsm_state13, p_sum1_cast_fu_399_p1, p_sum5_cast_fu_770_p1, ap_CS_fsm_state15)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)))) then 
            empty_4_address0 <= p_addr_6_reg_1114;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            empty_4_address0 <= p_sum_cast_reg_1091(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            empty_4_address0 <= p_sum5_cast_fu_770_p1(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            empty_4_address0 <= p_sum1_cast_fu_399_p1(16 - 1 downto 0);
        else 
            empty_4_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    empty_4_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)))) then 
            empty_4_ce0 <= ap_const_logic_1;
        else 
            empty_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_4_d0_assign_proc : process(ap_CS_fsm_state3, r_reg_1009, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            empty_4_d0 <= ap_const_lv16_28;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            empty_4_d0 <= r_reg_1009;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            empty_4_d0 <= ap_const_lv16_0;
        else 
            empty_4_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    empty_4_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, exitcond9_fu_653_p2, ap_CS_fsm_state13, exitcond3_fu_382_p2, tmp_19_fu_760_p2, tmp_13_fu_881_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_382_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_lv1_0 = exitcond9_fu_653_p2)) and not((ap_const_lv1_0 = tmp_19_fu_760_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_const_lv1_0 = tmp_13_fu_881_p2))))) then 
            empty_4_we0 <= ap_const_logic_1;
        else 
            empty_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_5_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, p_sum_cast_reg_1091, p_addr_8_reg_1122, ap_CS_fsm_state13, p_sum1_cast_fu_399_p1, p_sum6_cast_fu_788_p1, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)))) then 
            empty_5_address0 <= p_addr_8_reg_1122;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            empty_5_address0 <= p_sum_cast_reg_1091(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            empty_5_address0 <= p_sum6_cast_fu_788_p1(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            empty_5_address0 <= p_sum1_cast_fu_399_p1(16 - 1 downto 0);
        else 
            empty_5_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    empty_5_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)))) then 
            empty_5_ce0 <= ap_const_logic_1;
        else 
            empty_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_5_d0_assign_proc : process(ap_CS_fsm_state3, r_reg_1009, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            empty_5_d0 <= ap_const_lv16_DC;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            empty_5_d0 <= r_reg_1009;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            empty_5_d0 <= ap_const_lv16_0;
        else 
            empty_5_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    empty_5_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, exitcond9_fu_653_p2, exitcond3_fu_382_p2, tmp_20_fu_778_p2, ap_CS_fsm_state14, tmp_16_fu_887_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_382_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_lv1_0 = exitcond9_fu_653_p2)) and not((ap_const_lv1_0 = tmp_20_fu_778_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state14) and not((ap_const_lv1_0 = tmp_16_fu_887_p2))))) then 
            empty_5_we0 <= ap_const_logic_1;
        else 
            empty_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state10, p_sum_cast_fu_864_p1, p_addr_4_reg_1098, ap_CS_fsm_state11, p_sum1_cast_fu_399_p1, p_sum3_cast_fu_734_p1, ap_CS_fsm_state15)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)))) then 
            empty_address0 <= p_addr_4_reg_1098;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            empty_address0 <= p_sum_cast_fu_864_p1(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            empty_address0 <= p_sum3_cast_fu_734_p1(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            empty_address0 <= p_sum1_cast_fu_399_p1(16 - 1 downto 0);
        else 
            empty_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    empty_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)))) then 
            empty_ce0 <= ap_const_logic_1;
        else 
            empty_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_d0_assign_proc : process(ap_CS_fsm_state3, r_reg_1009, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            empty_d0 <= ap_const_lv16_32;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            empty_d0 <= r_reg_1009;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            empty_d0 <= ap_const_lv16_0;
        else 
            empty_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    empty_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, exitcond9_fu_653_p2, ap_CS_fsm_state11, exitcond3_fu_382_p2, tmp_14_fu_724_p2, tmp_7_fu_869_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_382_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_lv1_0 = exitcond9_fu_653_p2)) and not((ap_const_lv1_0 = tmp_14_fu_724_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state11) and not((ap_const_lv1_0 = tmp_7_fu_869_p2))))) then 
            empty_we0 <= ap_const_logic_1;
        else 
            empty_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_349_p2 <= "1" when (s_reg_239 = ap_const_lv9_100) else "0";
    exitcond2_fu_407_p2 <= "1" when (i_reg_261 = ap_const_lv9_100) else "0";
    exitcond3_fu_382_p2 <= "1" when (t_reg_250 = ap_const_lv9_100) else "0";
    exitcond5_fu_443_p2 <= "1" when (j_reg_272 = ap_const_lv9_100) else "0";
    exitcond6_fu_793_p2 <= "1" when (l_reg_315 = ap_const_lv9_100) else "0";
    exitcond8_fu_480_p2 <= "1" when (p_reg_284 = ap_const_lv3_4) else "0";
    exitcond9_fu_653_p2 <= "1" when (cluster_1_reg_304 = ap_const_lv3_4) else "0";
    exitcond_fu_829_p2 <= "1" when (q_reg_326 = ap_const_lv9_100) else "0";
    final_address0 <= final_addr_reg_1086;

    final_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            final_ce0 <= ap_const_logic_1;
        else 
            final_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    final_d0 <= std_logic_vector(unsigned(tmp2_fu_899_p2) + unsigned(tmp1_fu_893_p2));

    final_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state16)))) then 
            final_we0 <= ap_const_logic_1;
        else 
            final_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_413_p2 <= std_logic_vector(unsigned(i_reg_261) + unsigned(ap_const_lv9_1));
    image_in_address0 <= tmp_26_cast_fu_464_p1(16 - 1 downto 0);

    image_in_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            image_in_ce0 <= ap_const_logic_1;
        else 
            image_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_449_p2 <= std_logic_vector(unsigned(j_reg_272) + unsigned(ap_const_lv9_1));
    l_1_fu_799_p2 <= std_logic_vector(unsigned(l_reg_315) + unsigned(ap_const_lv9_1));
    min_2_phi_min1_fu_705_p3 <= 
        ab_3_17_fu_683_p3 when (tmp_15_fu_691_p2(0) = '1') else 
        min1_reg_295;
    p_1_fu_486_p2 <= std_logic_vector(unsigned(p_reg_284) + unsigned(ap_const_lv3_1));
    p_2_fu_713_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(cluster_1_reg_304));
    p_sum1_cast_fu_399_p1 <= std_logic_vector(resize(unsigned(p_sum1_fu_394_p2),32));
    p_sum1_fu_394_p2 <= std_logic_vector(unsigned(tmp_1_reg_920) + unsigned(t_cast_fu_378_p1));
    p_sum3_cast_fu_734_p1 <= std_logic_vector(resize(unsigned(p_sum3_fu_730_p2),32));
    p_sum3_fu_730_p2 <= std_logic_vector(unsigned(tmp_3_reg_980) + unsigned(tmp_cast_reg_1001));
    p_sum4_cast_fu_752_p1 <= std_logic_vector(resize(unsigned(p_sum4_fu_748_p2),32));
    p_sum4_fu_748_p2 <= std_logic_vector(unsigned(tmp_3_reg_980) + unsigned(tmp_cast_reg_1001));
    p_sum5_cast_fu_770_p1 <= std_logic_vector(resize(unsigned(p_sum5_fu_766_p2),32));
    p_sum5_fu_766_p2 <= std_logic_vector(unsigned(tmp_3_reg_980) + unsigned(tmp_cast_reg_1001));
    p_sum6_cast_fu_788_p1 <= std_logic_vector(resize(unsigned(p_sum6_fu_784_p2),32));
    p_sum6_fu_784_p2 <= std_logic_vector(unsigned(tmp_3_reg_980) + unsigned(tmp_cast_reg_1001));
    p_sum_cast_fu_864_p1 <= std_logic_vector(resize(unsigned(p_sum_fu_859_p2),32));
    p_sum_fu_859_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_855_p1) + unsigned(tmp_9_reg_1073));
    q_1_fu_835_p2 <= std_logic_vector(unsigned(q_reg_326) + unsigned(ap_const_lv9_1));
    s_1_fu_355_p2 <= std_logic_vector(unsigned(s_reg_239) + unsigned(ap_const_lv9_1));
    sel_tmp2_fu_553_p2 <= "1" when (tmp_23_fu_492_p1 = ap_const_lv2_1) else "0";
    sel_tmp3_fu_663_p2 <= "1" when (tmp_25_fu_659_p1 = ap_const_lv2_2) else "0";
    sel_tmp4_fu_567_p2 <= "1" when (tmp_23_fu_492_p1 = ap_const_lv2_0) else "0";
    sel_tmp6_fu_677_p2 <= "1" when (tmp_25_fu_659_p1 = ap_const_lv2_1) else "0";
    sel_tmp_fu_539_p2 <= "1" when (tmp_23_fu_492_p1 = ap_const_lv2_2) else "0";
    t_1_fu_388_p2 <= std_logic_vector(unsigned(t_reg_250) + unsigned(ap_const_lv9_1));
    t_cast_fu_378_p1 <= std_logic_vector(resize(unsigned(t_reg_250),16));
    tmp1_fu_893_p2 <= std_logic_vector(unsigned(empty_3_q0) + unsigned(empty_q0));
    tmp2_fu_899_p2 <= std_logic_vector(unsigned(empty_4_q0) + unsigned(empty_5_q0));
    tmp_10_fu_817_p1 <= l_reg_315(8 - 1 downto 0);
    tmp_11_cast_fu_855_p1 <= std_logic_vector(resize(unsigned(q_reg_326),16));
    tmp_11_fu_525_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_24_fu_515_p1));
    tmp_12_fu_875_p2 <= "1" when (signed(empty_3_q0) > signed(ap_const_lv16_0)) else "0";
    tmp_13_fu_881_p2 <= "1" when (signed(empty_4_q0) > signed(ap_const_lv16_0)) else "0";
    tmp_14_fu_724_p2 <= "1" when (cluster_fu_88 = ap_const_lv16_0) else "0";
    tmp_15_fu_691_p2 <= "1" when (signed(ab_3_17_fu_683_p3) < signed(min1_reg_295)) else "0";
    tmp_16_fu_887_p2 <= "1" when (signed(empty_5_q0) > signed(ap_const_lv16_0)) else "0";
    tmp_17_fu_742_p2 <= "1" when (cluster_fu_88 = ap_const_lv16_1) else "0";
    tmp_19_fu_760_p2 <= "1" when (cluster_fu_88 = ap_const_lv16_2) else "0";
    tmp_1_fu_365_p3 <= (tmp_2_fu_361_p1 & ap_const_lv8_0);
    tmp_20_fu_778_p2 <= "1" when (cluster_fu_88 = ap_const_lv16_3) else "0";
    tmp_21_cast_fu_427_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_419_p3),18));
    tmp_21_fu_459_p2 <= std_logic_vector(unsigned(tmp_21_cast_reg_975) + unsigned(tmp_cast1_fu_455_p1));
    tmp_22_fu_845_p2 <= std_logic_vector(unsigned(tmp_24_cast_reg_1068) + unsigned(tmp_5_cast_fu_841_p1));
    tmp_23_fu_492_p1 <= p_reg_284(2 - 1 downto 0);
    tmp_24_cast_fu_813_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_805_p3),18));
    tmp_24_fu_515_p1 <= tmp_8_fu_510_p2(16 - 1 downto 0);
    tmp_25_fu_659_p1 <= cluster_1_reg_304(2 - 1 downto 0);
    tmp_26_cast_fu_464_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_459_p2),32));
    tmp_27_cast_fu_850_p1 <= std_logic_vector(resize(unsigned(tmp_22_fu_845_p2),32));
    tmp_2_fu_361_p1 <= s_reg_239(8 - 1 downto 0);
    tmp_3_fu_435_p3 <= (tmp_5_fu_431_p1 & ap_const_lv8_0);
        tmp_4_fu_473_p1 <= std_logic_vector(resize(signed(image_in_q0),32));

    tmp_5_cast_fu_841_p1 <= std_logic_vector(resize(unsigned(q_reg_326),18));
    tmp_5_fu_431_p1 <= i_reg_261(8 - 1 downto 0);
    tmp_6_fu_419_p3 <= (i_reg_261 & ap_const_lv8_0);
    tmp_7_fu_869_p2 <= "1" when (signed(empty_q0) > signed(ap_const_lv16_0)) else "0";
    tmp_8_fu_510_p2 <= std_logic_vector(signed(tmp_4_reg_1017) - signed(tmp_fu_496_p6));
    tmp_9_fu_821_p3 <= (tmp_10_fu_817_p1 & ap_const_lv8_0);
    tmp_cast1_fu_455_p1 <= std_logic_vector(resize(unsigned(j_reg_272),18));
    tmp_cast_fu_469_p1 <= std_logic_vector(resize(unsigned(j_reg_272),16));
    tmp_s_fu_805_p3 <= (l_reg_315 & ap_const_lv8_0);
end behav;
